{"ast":null,"code":"\n\n// import React, { useEffect, useState, useMemo } from \"react\";\n// import { getUsers, deleteUser } from \"../services/api\";\n// import UserTable from \"../components/UserTable\";\n// import SearchBar from \"../components/SearchBar\";\n// import Pagination from \"../components/Pagination\";\n// import FilterPopup from \"../components/FilterPopup\";\n\n// /**\n//  * Utility: map JSONPlaceholder user to our model\n//  */\n// function mapUser(u) {\n//   const nameParts = (u.name || \"\").split(\" \");\n//   const firstName = nameParts[0] || \"\";\n//   const lastName = nameParts.slice(1).join(\" \") || \"\";\n//   const department = (u.company && u.company.name) ? u.company.name : \"General\";\n//   return {\n//     id: u.id,\n//     firstName,\n//     lastName,\n//     email: u.email || \"\",\n//     department,\n//     // keep original raw for edits if needed\n//     raw: u,\n//   };\n// }\n\n// export default function UsersPage() {\n//   const [rawUsers, setRawUsers] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   // UI states\n//   const [search, setSearch] = useState(\"\");\n//   const [filters, setFilters] = useState({ firstName: \"\", lastName: \"\", email: \"\", department: \"\" });\n//   const [filterPopupOpen, setFilterPopupOpen] = useState(false);\n//   const [pageSize, setPageSize] = useState(10);\n//   const [page, setPage] = useState(1);\n//   const [sortConfig, setSortConfig] = useState({ key: \"id\", direction: \"asc\" });\n\n//   useEffect(() => {\n//     fetchUsers();\n//   }, []);\n\n//   // Fetch users from API\n//   async function fetchUsers() {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const data = await getUsers();\n//       // map to our simpler model\n//       setRawUsers(data.map(mapUser));\n//     } catch (err) {\n//       console.error(err);\n//       setError(err.message || \"Error fetching users\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   }\n\n//   // Delete user handler\n//   async function handleDelete(id) {\n//     try {\n//       await deleteUser(id); // simulated\n//       // remove locally to reflect UI changes\n//       setRawUsers((prev) => prev.filter((u) => u.id !== id));\n//       alert(\"User deleted (simulated)\"); // simple notification\n//     } catch (err) {\n//       alert(\"Failed to delete user: \" + err.message);\n//     }\n//   }\n\n//   // Sort handler (toggle)\n//   function handleSort(key) {\n//     setSortConfig((prev) => {\n//       if (prev.key === key) {\n//         return { key, direction: prev.direction === \"asc\" ? \"desc\" : \"asc\" };\n//       } else {\n//         return { key, direction: \"asc\" };\n//       }\n//     });\n//   }\n\n//   // Apply filters + search + sort\n//   const processed = useMemo(() => {\n//     // start with rawUsers\n//     let items = [...rawUsers];\n\n//     // filter popup fields (exact/contains)\n//     if (filters.firstName) {\n//       items = items.filter((u) => u.firstName.toLowerCase().includes(filters.firstName.toLowerCase()));\n//     }\n//     if (filters.lastName) {\n//       items = items.filter((u) => u.lastName.toLowerCase().includes(filters.lastName.toLowerCase()));\n//     }\n//     if (filters.email) {\n//       items = items.filter((u) => u.email.toLowerCase().includes(filters.email.toLowerCase()));\n//     }\n//     if (filters.department) {\n//       items = items.filter((u) => u.department.toLowerCase().includes(filters.department.toLowerCase()));\n//     }\n\n//     // global search across fields\n//     if (search && search.trim() !== \"\") {\n//       const q = search.toLowerCase();\n//       items = items.filter((u) =>\n//         u.firstName.toLowerCase().includes(q) ||\n//         u.lastName.toLowerCase().includes(q) ||\n//         u.email.toLowerCase().includes(q) ||\n//         u.department.toLowerCase().includes(q)\n//       );\n//     }\n\n//     // sort\n//     const { key, direction } = sortConfig || {};\n//     if (key) {\n//       items.sort((a, b) => {\n//         const va = (a[key] || \"\").toString().toLowerCase();\n//         const vb = (b[key] || \"\").toString().toLowerCase();\n//         if (va < vb) return direction === \"asc\" ? -1 : 1;\n//         if (va > vb) return direction === \"asc\" ? 1 : -1;\n//         return 0;\n//       });\n//     }\n\n//     return items;\n//   }, [rawUsers, search, filters, sortConfig]);\n\n//   // pagination calculations\n//   const totalItems = processed.length;\n//   const totalPages = Math.max(1, Math.ceil(totalItems / pageSize));\n//   // adjust page if current page out of range\n//   useEffect(() => {\n//     if (page > totalPages) setPage(totalPages);\n//   }, [totalPages, page]);\n\n//   const currentData = processed.slice((page - 1) * pageSize, page * pageSize);\n\n//   return (\n//     <div>\n//       <div className=\"d-flex flex-column flex-md-row align-items-start gap-3 justify-content-between mb-3\">\n//         <div style={{ flex: 1, minWidth: 280 }}>\n//           <SearchBar value={search} onChange={(v) => { setSearch(v); setPage(1); }} />\n//         </div>\n\n//         <div className=\"d-flex gap-2 align-items-center\">\n//           <div>\n//             <select className=\"form-select\" value={pageSize} onChange={(e) => { setPageSize(Number(e.target.value)); setPage(1); }}>\n//               {[10, 25, 50, 100].map((n) => <option key={n} value={n}>{n} / page</option>)}\n//             </select>\n//           </div>\n\n//           <button className=\"btn btn-outline-secondary\" onClick={() => setFilterPopupOpen(true)}>Filter</button>\n//           <button className=\"btn btn-outline-success\" onClick={fetchUsers}>Refresh</button>\n//         </div>\n//       </div>\n\n//       {loading && <div className=\"alert alert-info\">Loading users...</div>}\n//       {error && <div className=\"alert alert-danger\">{error}</div>}\n\n//       <UserTable users={currentData} onDelete={handleDelete} onSort={handleSort} sortConfig={sortConfig} />\n\n//       <div className=\"d-flex justify-content-between align-items-center\">\n//         <div><small>Showing {(page - 1) * pageSize + 1} - {Math.min(totalItems, page * pageSize)} of {totalItems} users</small></div>\n//         <Pagination currentPage={page} totalPages={totalPages} onPageChange={(p) => setPage(p)} />\n//       </div>\n\n//       <FilterPopup visible={filterPopupOpen} onClose={() => setFilterPopupOpen(false)} onApply={(f) => { setFilters(f); setPage(1); }} initialFilters={filters} />\n//     </div>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/dmayu/OneDrive/Desktop/kanishka/project/extra/user_Dashboard/user_dashboard/src/pages/UsersPage.jsx"],"sourcesContent":["\r\n\r\n\r\n\r\n// import React, { useEffect, useState, useMemo } from \"react\";\r\n// import { getUsers, deleteUser } from \"../services/api\";\r\n// import UserTable from \"../components/UserTable\";\r\n// import SearchBar from \"../components/SearchBar\";\r\n// import Pagination from \"../components/Pagination\";\r\n// import FilterPopup from \"../components/FilterPopup\";\r\n\r\n// /**\r\n//  * Utility: map JSONPlaceholder user to our model\r\n//  */\r\n// function mapUser(u) {\r\n//   const nameParts = (u.name || \"\").split(\" \");\r\n//   const firstName = nameParts[0] || \"\";\r\n//   const lastName = nameParts.slice(1).join(\" \") || \"\";\r\n//   const department = (u.company && u.company.name) ? u.company.name : \"General\";\r\n//   return {\r\n//     id: u.id,\r\n//     firstName,\r\n//     lastName,\r\n//     email: u.email || \"\",\r\n//     department,\r\n//     // keep original raw for edits if needed\r\n//     raw: u,\r\n//   };\r\n// }\r\n\r\n// export default function UsersPage() {\r\n//   const [rawUsers, setRawUsers] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   // UI states\r\n//   const [search, setSearch] = useState(\"\");\r\n//   const [filters, setFilters] = useState({ firstName: \"\", lastName: \"\", email: \"\", department: \"\" });\r\n//   const [filterPopupOpen, setFilterPopupOpen] = useState(false);\r\n//   const [pageSize, setPageSize] = useState(10);\r\n//   const [page, setPage] = useState(1);\r\n//   const [sortConfig, setSortConfig] = useState({ key: \"id\", direction: \"asc\" });\r\n\r\n//   useEffect(() => {\r\n//     fetchUsers();\r\n//   }, []);\r\n\r\n//   // Fetch users from API\r\n//   async function fetchUsers() {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const data = await getUsers();\r\n//       // map to our simpler model\r\n//       setRawUsers(data.map(mapUser));\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       setError(err.message || \"Error fetching users\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   }\r\n\r\n//   // Delete user handler\r\n//   async function handleDelete(id) {\r\n//     try {\r\n//       await deleteUser(id); // simulated\r\n//       // remove locally to reflect UI changes\r\n//       setRawUsers((prev) => prev.filter((u) => u.id !== id));\r\n//       alert(\"User deleted (simulated)\"); // simple notification\r\n//     } catch (err) {\r\n//       alert(\"Failed to delete user: \" + err.message);\r\n//     }\r\n//   }\r\n\r\n//   // Sort handler (toggle)\r\n//   function handleSort(key) {\r\n//     setSortConfig((prev) => {\r\n//       if (prev.key === key) {\r\n//         return { key, direction: prev.direction === \"asc\" ? \"desc\" : \"asc\" };\r\n//       } else {\r\n//         return { key, direction: \"asc\" };\r\n//       }\r\n//     });\r\n//   }\r\n\r\n//   // Apply filters + search + sort\r\n//   const processed = useMemo(() => {\r\n//     // start with rawUsers\r\n//     let items = [...rawUsers];\r\n\r\n//     // filter popup fields (exact/contains)\r\n//     if (filters.firstName) {\r\n//       items = items.filter((u) => u.firstName.toLowerCase().includes(filters.firstName.toLowerCase()));\r\n//     }\r\n//     if (filters.lastName) {\r\n//       items = items.filter((u) => u.lastName.toLowerCase().includes(filters.lastName.toLowerCase()));\r\n//     }\r\n//     if (filters.email) {\r\n//       items = items.filter((u) => u.email.toLowerCase().includes(filters.email.toLowerCase()));\r\n//     }\r\n//     if (filters.department) {\r\n//       items = items.filter((u) => u.department.toLowerCase().includes(filters.department.toLowerCase()));\r\n//     }\r\n\r\n//     // global search across fields\r\n//     if (search && search.trim() !== \"\") {\r\n//       const q = search.toLowerCase();\r\n//       items = items.filter((u) =>\r\n//         u.firstName.toLowerCase().includes(q) ||\r\n//         u.lastName.toLowerCase().includes(q) ||\r\n//         u.email.toLowerCase().includes(q) ||\r\n//         u.department.toLowerCase().includes(q)\r\n//       );\r\n//     }\r\n\r\n//     // sort\r\n//     const { key, direction } = sortConfig || {};\r\n//     if (key) {\r\n//       items.sort((a, b) => {\r\n//         const va = (a[key] || \"\").toString().toLowerCase();\r\n//         const vb = (b[key] || \"\").toString().toLowerCase();\r\n//         if (va < vb) return direction === \"asc\" ? -1 : 1;\r\n//         if (va > vb) return direction === \"asc\" ? 1 : -1;\r\n//         return 0;\r\n//       });\r\n//     }\r\n\r\n//     return items;\r\n//   }, [rawUsers, search, filters, sortConfig]);\r\n\r\n//   // pagination calculations\r\n//   const totalItems = processed.length;\r\n//   const totalPages = Math.max(1, Math.ceil(totalItems / pageSize));\r\n//   // adjust page if current page out of range\r\n//   useEffect(() => {\r\n//     if (page > totalPages) setPage(totalPages);\r\n//   }, [totalPages, page]);\r\n\r\n//   const currentData = processed.slice((page - 1) * pageSize, page * pageSize);\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className=\"d-flex flex-column flex-md-row align-items-start gap-3 justify-content-between mb-3\">\r\n//         <div style={{ flex: 1, minWidth: 280 }}>\r\n//           <SearchBar value={search} onChange={(v) => { setSearch(v); setPage(1); }} />\r\n//         </div>\r\n\r\n//         <div className=\"d-flex gap-2 align-items-center\">\r\n//           <div>\r\n//             <select className=\"form-select\" value={pageSize} onChange={(e) => { setPageSize(Number(e.target.value)); setPage(1); }}>\r\n//               {[10, 25, 50, 100].map((n) => <option key={n} value={n}>{n} / page</option>)}\r\n//             </select>\r\n//           </div>\r\n\r\n//           <button className=\"btn btn-outline-secondary\" onClick={() => setFilterPopupOpen(true)}>Filter</button>\r\n//           <button className=\"btn btn-outline-success\" onClick={fetchUsers}>Refresh</button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {loading && <div className=\"alert alert-info\">Loading users...</div>}\r\n//       {error && <div className=\"alert alert-danger\">{error}</div>}\r\n\r\n//       <UserTable users={currentData} onDelete={handleDelete} onSort={handleSort} sortConfig={sortConfig} />\r\n\r\n//       <div className=\"d-flex justify-content-between align-items-center\">\r\n//         <div><small>Showing {(page - 1) * pageSize + 1} - {Math.min(totalItems, page * pageSize)} of {totalItems} users</small></div>\r\n//         <Pagination currentPage={page} totalPages={totalPages} onPageChange={(p) => setPage(p)} />\r\n//       </div>\r\n\r\n//       <FilterPopup visible={filterPopupOpen} onClose={() => setFilterPopupOpen(false)} onApply={(f) => { setFilters(f); setPage(1); }} initialFilters={filters} />\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappings":";;AAIA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}