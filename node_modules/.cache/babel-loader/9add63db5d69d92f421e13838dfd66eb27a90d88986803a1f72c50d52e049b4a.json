{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dmayu\\\\OneDrive\\\\Desktop\\\\kanishka\\\\project\\\\extra\\\\user_Dashboard\\\\user_dashboard\\\\src\\\\pages\\\\UsersPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { getUsers, deleteUser } from \"../services/api\";\nimport UserTable from \"../components/UserTable\";\nimport Pagination from \"../components/Pagination\";\nimport SearchBar from \"../components/SearchBar\";\nimport FilterPopup from \"../components/FilterPopup\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UsersPage = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [filters, setFilters] = useState({});\n  const [sortField, setSortField] = useState(\"\");\n  const [sortOrder, setSortOrder] = useState(\"asc\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageLimit, setPageLimit] = useState(10);\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n  const fetchUsers = async () => {\n    try {\n      const data = await getUsers();\n      const withDept = data.map((user, index) => ({\n        ...user,\n        department: [\"IT\", \"HR\", \"Finance\", \"Marketing\"][index % 4]\n      }));\n      setUsers(withDept);\n    } catch (error) {\n      alert(\"Failed to fetch users\");\n    }\n  };\n  const handleDelete = async id => {\n    if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\n    try {\n      await deleteUser(id);\n      setUsers(users.filter(u => u.id !== id));\n    } catch {\n      alert(\"Failed to delete user\");\n    }\n  };\n  const handleSearch = query => {\n    setSearchQuery(query);\n    setCurrentPage(1);\n  };\n  const handleFilterChange = newFilters => {\n    setFilters(newFilters);\n    setCurrentPage(1);\n  };\n  const handleSort = field => {\n    if (sortField === field) setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");else {\n      setSortField(field);\n      setSortOrder(\"asc\");\n    }\n  };\n  const filteredUsers = users.filter(user => {\n    const [firstName, lastName] = user.name.split(\" \");\n    const matchSearch = !searchQuery || user.name.toLowerCase().includes(searchQuery.toLowerCase()) || user.email.toLowerCase().includes(searchQuery.toLowerCase()) || user.department.toLowerCase().includes(searchQuery.toLowerCase());\n    const matchFirst = !filters.firstName || (firstName === null || firstName === void 0 ? void 0 : firstName.toLowerCase().includes(filters.firstName.toLowerCase()));\n    const matchLast = !filters.lastName || (lastName === null || lastName === void 0 ? void 0 : lastName.toLowerCase().includes(filters.lastName.toLowerCase()));\n    const matchEmail = !filters.email || user.email.toLowerCase().includes(filters.email.toLowerCase());\n    const matchDept = !filters.department || user.department.toLowerCase() === filters.department.toLowerCase();\n    return matchSearch && matchFirst && matchLast && matchEmail && matchDept;\n  });\n  const sortedUsers = [...filteredUsers].sort((a, b) => {\n    if (!sortField) return 0;\n    let valA = a[sortField],\n      valB = b[sortField];\n    if (sortField === \"firstName\") {\n      valA = a.name.split(\" \")[0];\n      valB = b.name.split(\" \")[0];\n    }\n    if (sortField === \"lastName\") {\n      valA = a.name.split(\" \")[1] || \"\";\n      valB = b.name.split(\" \")[1] || \"\";\n    }\n    if (typeof valA === \"string\") valA = valA.toLowerCase();\n    if (typeof valB === \"string\") valB = valB.toLowerCase();\n    if (valA < valB) return sortOrder === \"asc\" ? -1 : 1;\n    if (valA > valB) return sortOrder === \"asc\" ? 1 : -1;\n    return 0;\n  });\n  const startIndex = (currentPage - 1) * pageLimit;\n  const paginatedUsers = sortedUsers.slice(startIndex, startIndex + pageLimit);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    className: \"my-4\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center mb-4\",\n      children: \"User Management Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Row, {\n      className: \"mb-3 align-items-center\",\n      children: [/*#__PURE__*/_jsxDEV(Col, {\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(SearchBar, {\n          onSearch: handleSearch\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 4,\n        children: /*#__PURE__*/_jsxDEV(FilterPopup, {\n          onFilterChange: handleFilterChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Col, {\n        md: 4,\n        className: \"text-md-end mt-2 mt-md-0\",\n        children: /*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => navigate(\"/add\"),\n          children: \"+ Add User\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserTable, {\n      users: paginatedUsers,\n      onDelete: handleDelete,\n      onSort: handleSort,\n      sortField: sortField,\n      sortOrder: sortOrder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      currentPage: currentPage,\n      totalItems: sortedUsers.length,\n      pageLimit: pageLimit,\n      onPageChange: setCurrentPage,\n      onLimitChange: setPageLimit\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n};\n_s(UsersPage, \"MpOtVU/iqcKOAPrKFNpQYJy2kk4=\", false, function () {\n  return [useNavigate];\n});\n_c = UsersPage;\nexport default UsersPage;\n\n// import React, { useEffect, useState } from \"react\";\n// import { getUsers, deleteUser } from \"../services/api\";\n// import UserTable from \"../components/UserTable\";\n// import Pagination from \"../components/Pagination\";\n// import SearchBar from \"../components/SearchBar\";\n// import FilterPopup from \"../components/FilterPopup\";\n// import { useNavigate, useLocation } from \"react-router-dom\";\n// import { Container, Row, Col, Button } from \"react-bootstrap\";\n\n// const UsersPage = () => {\n//   const [users, setUsers] = useState([]);\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [filters, setFilters] = useState({});\n//   const [sortField, setSortField] = useState(\"\");\n//   const [sortOrder, setSortOrder] = useState(\"asc\");\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [pageLimit, setPageLimit] = useState(10);\n//   const navigate = useNavigate();\n//   const location = useLocation();\n\n//   useEffect(() => { fetchUsers(); }, [location]);\n\n//   const fetchUsers = async () => {\n//     try {\n//       const data = await getUsers();\n//       const withDept = data.map((user, index) => ({\n//         ...user,\n//         department: [\"IT\", \"HR\", \"Finance\", \"Marketing\"][index % 4],\n//       }));\n//       setUsers(withDept);\n//     } catch (error) { alert(\"Failed to fetch users\"); }\n//   };\n\n//   const handleDelete = async (id) => {\n//     if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\n//     try {\n//       await deleteUser(id);\n//       setUsers(users.filter((u) => u.id !== id));\n//     } catch { alert(\"Failed to delete user\"); }\n//   };\n\n//   const handleSearch = (query) => { setSearchQuery(query); setCurrentPage(1); };\n//   const handleFilterChange = (newFilters) => { setFilters(newFilters); setCurrentPage(1); };\n//   const handleSort = (field) => {\n//     if (sortField === field) setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n//     else { setSortField(field); setSortOrder(\"asc\"); }\n//   };\n\n//   // Filtering & Sorting & Pagination logic (same as previous version)...\n//   const filteredUsers = users.filter((user) => {\n//     const [firstName, lastName] = user.name.split(\" \");\n//     const matchSearch =\n//       !searchQuery ||\n//       user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n//       user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n//       user.department.toLowerCase().includes(searchQuery.toLowerCase());\n//     const matchFirst = !filters.firstName || firstName?.toLowerCase().includes(filters.firstName.toLowerCase());\n//     const matchLast = !filters.lastName || lastName?.toLowerCase().includes(filters.lastName.toLowerCase());\n//     const matchEmail = !filters.email || user.email.toLowerCase().includes(filters.email.toLowerCase());\n//     const matchDept = !filters.department || user.department.toLowerCase() === filters.department.toLowerCase();\n//     return matchSearch && matchFirst && matchLast && matchEmail && matchDept;\n//   });\n\n//   const sortedUsers = [...filteredUsers].sort((a, b) => {\n//     if (!sortField) return 0;\n//     let valA = a[sortField], valB = b[sortField];\n//     if (sortField === \"firstName\") { valA = a.name.split(\" \")[0]; valB = b.name.split(\" \")[0]; }\n//     if (sortField === \"lastName\") { valA = a.name.split(\" \")[1] || \"\"; valB = b.name.split(\" \")[1] || \"\"; }\n//     if (typeof valA === \"string\") valA = valA.toLowerCase();\n//     if (typeof valB === \"string\") valB = valB.toLowerCase();\n//     if (valA < valB) return sortOrder === \"asc\" ? -1 : 1;\n//     if (valA > valB) return sortOrder === \"asc\" ? 1 : -1;\n//     return 0;\n//   });\n\n//   const startIndex = (currentPage - 1) * pageLimit;\n//   const paginatedUsers = sortedUsers.slice(startIndex, startIndex + pageLimit);\n\n//   return (\n//     <Container className=\"my-4\">\n//       <h2 className=\"text-center mb-4\">User Management Dashboard</h2>\n\n//       <Row className=\"mb-3 align-items-center\">\n//         <Col md={4}><SearchBar onSearch={handleSearch} /></Col>\n//         <Col md={4}><FilterPopup onFilterChange={handleFilterChange} /></Col>\n//         <Col md={4} className=\"text-md-end mt-2 mt-md-0\">\n//           <Button onClick={() => navigate(\"/add\")}>+ Add User</Button>\n//         </Col>\n//       </Row>\n\n//       <UserTable users={paginatedUsers} onDelete={handleDelete} onSort={handleSort} />\n\n//       <Pagination\n//         currentPage={currentPage}\n//         totalItems={sortedUsers.length}\n//         pageLimit={pageLimit}\n//         onPageChange={setCurrentPage}\n//         onLimitChange={setPageLimit}\n//       />\n//     </Container>\n//   );\n// };\n\n// export default UsersPage;\n\n//=======================\n\n// import React, { useEffect, useState } from \"react\";\n// import { getUsers, deleteUser } from \"../services/api\";\n// import UserTable from \"../components/UserTable\";\n// import Pagination from \"../components/Pagination\";\n// import SearchBar from \"../components/SearchBar\";\n// import FilterPopup from \"../components/FilterPopup\";\n// import { useNavigate, useLocation } from \"react-router-dom\";\n\n// const UsersPage = () => {\n//   const [users, setUsers] = useState([]);\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [filters, setFilters] = useState({});\n//   const [sortField, setSortField] = useState(\"\");\n//   const [sortOrder, setSortOrder] = useState(\"asc\");\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [pageLimit, setPageLimit] = useState(10);\n//   const navigate = useNavigate();\n//   const location = useLocation(); // track route changes\n\n//   // Fetch users whenever location changes (e.g., after add/edit)\n//   useEffect(() => {\n//     fetchUsers();\n//   }, [location]);\n\n//   const fetchUsers = async () => {\n//     try {\n//       const data = await getUsers();\n//       const withDept = data.map((user, index) => ({\n//         ...user,\n//         department: [\"IT\", \"HR\", \"Finance\", \"Marketing\"][index % 4],\n//       }));\n//       setUsers(withDept);\n//     } catch (error) {\n//       alert(\"Failed to fetch users\");\n//     }\n//   };\n\n//   const handleDelete = async (id) => {\n//     if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\n//     try {\n//       await deleteUser(id);\n//       setUsers(users.filter((u) => u.id !== id));\n//     } catch (error) {\n//       alert(\"Failed to delete user\");\n//     }\n//   };\n\n//   const handleSearch = (query) => {\n//     setSearchQuery(query);\n//     setCurrentPage(1);\n//   };\n\n//   const handleFilterChange = (newFilters) => {\n//     setFilters(newFilters);\n//     setCurrentPage(1);\n//   };\n\n//   const handleSort = (field) => {\n//     if (sortField === field) {\n//       setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n//     } else {\n//       setSortField(field);\n//       setSortOrder(\"asc\");\n//     }\n//   };\n\n//   // Filtering\n//   const filteredUsers = users.filter((user) => {\n//     const [firstName, lastName] = user.name.split(\" \");\n//     const matchSearch =\n//       !searchQuery ||\n//       user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n//       user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n//       user.department.toLowerCase().includes(searchQuery.toLowerCase());\n\n//     const matchFirst =\n//       !filters.firstName ||\n//       firstName?.toLowerCase().includes(filters.firstName.toLowerCase());\n//     const matchLast =\n//       !filters.lastName ||\n//       lastName?.toLowerCase().includes(filters.lastName.toLowerCase());\n//     const matchEmail =\n//       !filters.email || user.email.toLowerCase().includes(filters.email.toLowerCase());\n//     const matchDept =\n//       !filters.department || user.department.toLowerCase() === filters.department.toLowerCase();\n\n//     return matchSearch && matchFirst && matchLast && matchEmail && matchDept;\n//   });\n\n//   // Sorting\n//   const sortedUsers = [...filteredUsers].sort((a, b) => {\n//     if (!sortField) return 0;\n//     let valA, valB;\n//     switch (sortField) {\n//       case \"firstName\":\n//         valA = a.name.split(\" \")[0];\n//         valB = b.name.split(\" \")[0];\n//         break;\n//       case \"lastName\":\n//         valA = a.name.split(\" \")[1] || \"\";\n//         valB = b.name.split(\" \")[1] || \"\";\n//         break;\n//       default:\n//         valA = a[sortField];\n//         valB = b[sortField];\n//     }\n//     if (typeof valA === \"string\") valA = valA.toLowerCase();\n//     if (typeof valB === \"string\") valB = valB.toLowerCase();\n\n//     if (valA < valB) return sortOrder === \"asc\" ? -1 : 1;\n//     if (valA > valB) return sortOrder === \"asc\" ? 1 : -1;\n//     return 0;\n//   });\n\n//   // Pagination\n//   const startIndex = (currentPage - 1) * pageLimit;\n//   const paginatedUsers = sortedUsers.slice(startIndex, startIndex + pageLimit);\n\n//   return (\n//     <div style={{ padding: \"20px\", maxWidth: \"1200px\", margin: \"auto\" }}>\n//       <h2 style={{ textAlign: \"center\" }}>User Management Dashboard</h2>\n\n//       <div\n//         style={{\n//           display: \"flex\",\n//           justifyContent: \"space-between\",\n//           margin: \"20px 0\",\n//           flexWrap: \"wrap\",\n//           gap: \"10px\",\n//         }}\n//       >\n//         <SearchBar onSearch={handleSearch} />\n//         <FilterPopup onFilterChange={handleFilterChange} />\n//         <button onClick={() => navigate(\"/add\")}>+ Add User</button>\n//       </div>\n\n//       <UserTable users={paginatedUsers} onDelete={handleDelete} onSort={handleSort} />\n\n//       <Pagination\n//         currentPage={currentPage}\n//         totalItems={sortedUsers.length}\n//         pageLimit={pageLimit}\n//         onPageChange={setCurrentPage}\n//         onLimitChange={setPageLimit}\n//       />\n//     </div>\n//   );\n// };\n\n// export default UsersPage;\n\n//ok-----------------------------------------------------------------------\n\n// import React, { useEffect, useState } from \"react\";\n// import { getUsers, deleteUser } from \"../services/api\";\n// import UserTable from \"../components/UserTable\";\n// import Pagination from \"../components/Pagination\";\n// import SearchBar from \"../components/SearchBar\";\n// import FilterPopup from \"../components/FilterPopup\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const UsersPage = () => {\n//   const [users, setUsers] = useState([]);\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [filters, setFilters] = useState({});\n//   const [sortField, setSortField] = useState(\"\");\n//   const [sortOrder, setSortOrder] = useState(\"asc\");\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [pageLimit, setPageLimit] = useState(10);\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     fetchUsers();\n//   }, []);\n\n//   const fetchUsers = async () => {\n//     try {\n//       const data = await getUsers();\n//       const withDept = data.map((user, index) => ({\n//         ...user,\n//         department: [\"IT\", \"HR\", \"Finance\", \"Marketing\"][index % 4],\n//       }));\n//       setUsers(withDept);\n//     } catch (error) {\n//       alert(\"Failed to fetch users\");\n//     }\n//   };\n\n//   const handleDelete = async (id) => {\n//     if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\n//     try {\n//       await deleteUser(id);\n//       setUsers(users.filter((u) => u.id !== id));\n//     } catch (error) {\n//       alert(\"Failed to delete user\");\n//     }\n//   };\n\n//   const handleSearch = (query) => {\n//     setSearchQuery(query);\n//     setCurrentPage(1);\n//   };\n\n//   const handleFilterChange = (newFilters) => {\n//     setFilters(newFilters);\n//     setCurrentPage(1);\n//   };\n\n//   const handleSort = (field) => {\n//     if (sortField === field) {\n//       setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n//     } else {\n//       setSortField(field);\n//       setSortOrder(\"asc\");\n//     }\n//   };\n\n//   const filteredUsers = users.filter((user) => {\n//     const [firstName, lastName] = user.name.split(\" \");\n//     const matchSearch =\n//       !searchQuery ||\n//       user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n//       user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n//       user.department.toLowerCase().includes(searchQuery.toLowerCase());\n\n//     const matchFirst =\n//       !filters.firstName ||\n//       firstName?.toLowerCase().includes(filters.firstName.toLowerCase());\n//     const matchLast =\n//       !filters.lastName ||\n//       lastName?.toLowerCase().includes(filters.lastName.toLowerCase());\n//     const matchEmail =\n//       !filters.email ||\n//       user.email.toLowerCase().includes(filters.email.toLowerCase());\n//     const matchDept =\n//       !filters.department ||\n//       user.department.toLowerCase() === filters.department.toLowerCase();\n\n//     return matchSearch && matchFirst && matchLast && matchEmail && matchDept;\n//   });\n\n//   const sortedUsers = [...filteredUsers].sort((a, b) => {\n//     if (!sortField) return 0;\n//     let valA, valB;\n//     switch (sortField) {\n//       case \"firstName\":\n//         valA = a.name.split(\" \")[0];\n//         valB = b.name.split(\" \")[0];\n//         break;\n//       case \"lastName\":\n//         valA = a.name.split(\" \")[1] || \"\";\n//         valB = b.name.split(\" \")[1] || \"\";\n//         break;\n//       default:\n//         valA = a[sortField];\n//         valB = b[sortField];\n//     }\n//     if (typeof valA === \"string\") valA = valA.toLowerCase();\n//     if (typeof valB === \"string\") valB = valB.toLowerCase();\n\n//     if (valA < valB) return sortOrder === \"asc\" ? -1 : 1;\n//     if (valA > valB) return sortOrder === \"asc\" ? 1 : -1;\n//     return 0;\n//   });\n\n//   const startIndex = (currentPage - 1) * pageLimit;\n//   const paginatedUsers = sortedUsers.slice(startIndex, startIndex + pageLimit);\n\n//   return (\n//     <div style={{ padding: \"20px\", maxWidth: \"1200px\", margin: \"auto\" }}>\n//       <h2 style={{ textAlign: \"center\" }}>User Management Dashboard</h2>\n\n//       <div style={{ display: \"flex\", justifyContent: \"space-between\", margin: \"20px 0\", flexWrap: \"wrap\", gap: \"10px\" }}>\n//         <SearchBar onSearch={handleSearch} />\n//         <FilterPopup onFilterChange={handleFilterChange} />\n//         <button onClick={() => navigate(\"/add\")}>+ Add User</button>\n//       </div>\n\n//       <UserTable users={paginatedUsers} onDelete={handleDelete} onSort={handleSort} />\n\n//       <Pagination\n//         currentPage={currentPage}\n//         totalItems={sortedUsers.length}\n//         pageLimit={pageLimit}\n//         onPageChange={setCurrentPage}\n//         onLimitChange={setPageLimit}\n//       />\n//     </div>\n//   );\n// };\n\n// export default UsersPage;\n\n//==================================================================\n//\n\n// import React, { useEffect, useState, useMemo } from \"react\";\n// import { getUsers, deleteUser } from \"../services/api\";\n// import UserTable from \"../components/UserTable\";\n// import SearchBar from \"../components/SearchBar\";\n// import Pagination from \"../components/Pagination\";\n// import FilterPopup from \"../components/FilterPopup\";\n\n// /**\n//  * Utility: map JSONPlaceholder user to our model\n//  */\n// function mapUser(u) {\n//   const nameParts = (u.name || \"\").split(\" \");\n//   const firstName = nameParts[0] || \"\";\n//   const lastName = nameParts.slice(1).join(\" \") || \"\";\n//   const department = (u.company && u.company.name) ? u.company.name : \"General\";\n//   return {\n//     id: u.id,\n//     firstName,\n//     lastName,\n//     email: u.email || \"\",\n//     department,\n//     // keep original raw for edits if needed\n//     raw: u,\n//   };\n// }\n\n// export default function UsersPage() {\n//   const [rawUsers, setRawUsers] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   // UI states\n//   const [search, setSearch] = useState(\"\");\n//   const [filters, setFilters] = useState({ firstName: \"\", lastName: \"\", email: \"\", department: \"\" });\n//   const [filterPopupOpen, setFilterPopupOpen] = useState(false);\n//   const [pageSize, setPageSize] = useState(10);\n//   const [page, setPage] = useState(1);\n//   const [sortConfig, setSortConfig] = useState({ key: \"id\", direction: \"asc\" });\n\n//   useEffect(() => {\n//     fetchUsers();\n//   }, []);\n\n//   // Fetch users from API\n//   async function fetchUsers() {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const data = await getUsers();\n//       // map to our simpler model\n//       setRawUsers(data.map(mapUser));\n//     } catch (err) {\n//       console.error(err);\n//       setError(err.message || \"Error fetching users\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   }\n\n//   // Delete user handler\n//   async function handleDelete(id) {\n//     try {\n//       await deleteUser(id); // simulated\n//       // remove locally to reflect UI changes\n//       setRawUsers((prev) => prev.filter((u) => u.id !== id));\n//       alert(\"User deleted (simulated)\"); // simple notification\n//     } catch (err) {\n//       alert(\"Failed to delete user: \" + err.message);\n//     }\n//   }\n\n//   // Sort handler (toggle)\n//   function handleSort(key) {\n//     setSortConfig((prev) => {\n//       if (prev.key === key) {\n//         return { key, direction: prev.direction === \"asc\" ? \"desc\" : \"asc\" };\n//       } else {\n//         return { key, direction: \"asc\" };\n//       }\n//     });\n//   }\n\n//   // Apply filters + search + sort\n//   const processed = useMemo(() => {\n//     // start with rawUsers\n//     let items = [...rawUsers];\n\n//     // filter popup fields (exact/contains)\n//     if (filters.firstName) {\n//       items = items.filter((u) => u.firstName.toLowerCase().includes(filters.firstName.toLowerCase()));\n//     }\n//     if (filters.lastName) {\n//       items = items.filter((u) => u.lastName.toLowerCase().includes(filters.lastName.toLowerCase()));\n//     }\n//     if (filters.email) {\n//       items = items.filter((u) => u.email.toLowerCase().includes(filters.email.toLowerCase()));\n//     }\n//     if (filters.department) {\n//       items = items.filter((u) => u.department.toLowerCase().includes(filters.department.toLowerCase()));\n//     }\n\n//     // global search across fields\n//     if (search && search.trim() !== \"\") {\n//       const q = search.toLowerCase();\n//       items = items.filter((u) =>\n//         u.firstName.toLowerCase().includes(q) ||\n//         u.lastName.toLowerCase().includes(q) ||\n//         u.email.toLowerCase().includes(q) ||\n//         u.department.toLowerCase().includes(q)\n//       );\n//     }\n\n//     // sort\n//     const { key, direction } = sortConfig || {};\n//     if (key) {\n//       items.sort((a, b) => {\n//         const va = (a[key] || \"\").toString().toLowerCase();\n//         const vb = (b[key] || \"\").toString().toLowerCase();\n//         if (va < vb) return direction === \"asc\" ? -1 : 1;\n//         if (va > vb) return direction === \"asc\" ? 1 : -1;\n//         return 0;\n//       });\n//     }\n\n//     return items;\n//   }, [rawUsers, search, filters, sortConfig]);\n\n//   // pagination calculations\n//   const totalItems = processed.length;\n//   const totalPages = Math.max(1, Math.ceil(totalItems / pageSize));\n//   // adjust page if current page out of range\n//   useEffect(() => {\n//     if (page > totalPages) setPage(totalPages);\n//   }, [totalPages, page]);\n\n//   const currentData = processed.slice((page - 1) * pageSize, page * pageSize);\n\n//   return (\n//     <div>\n//       <div className=\"d-flex flex-column flex-md-row align-items-start gap-3 justify-content-between mb-3\">\n//         <div style={{ flex: 1, minWidth: 280 }}>\n//           <SearchBar value={search} onChange={(v) => { setSearch(v); setPage(1); }} />\n//         </div>\n\n//         <div className=\"d-flex gap-2 align-items-center\">\n//           <div>\n//             <select className=\"form-select\" value={pageSize} onChange={(e) => { setPageSize(Number(e.target.value)); setPage(1); }}>\n//               {[10, 25, 50, 100].map((n) => <option key={n} value={n}>{n} / page</option>)}\n//             </select>\n//           </div>\n\n//           <button className=\"btn btn-outline-secondary\" onClick={() => setFilterPopupOpen(true)}>Filter</button>\n//           <button className=\"btn btn-outline-success\" onClick={fetchUsers}>Refresh</button>\n//         </div>\n//       </div>\n\n//       {loading && <div className=\"alert alert-info\">Loading users...</div>}\n//       {error && <div className=\"alert alert-danger\">{error}</div>}\n\n//       <UserTable users={currentData} onDelete={handleDelete} onSort={handleSort} sortConfig={sortConfig} />\n\n//       <div className=\"d-flex justify-content-between align-items-center\">\n//         <div><small>Showing {(page - 1) * pageSize + 1} - {Math.min(totalItems, page * pageSize)} of {totalItems} users</small></div>\n//         <Pagination currentPage={page} totalPages={totalPages} onPageChange={(p) => setPage(p)} />\n//       </div>\n\n//       <FilterPopup visible={filterPopupOpen} onClose={() => setFilterPopupOpen(false)} onApply={(f) => { setFilters(f); setPage(1); }} initialFilters={filters} />\n//     </div>\n//   );\n// }\nvar _c;\n$RefreshReg$(_c, \"UsersPage\");","map":{"version":3,"names":["React","useEffect","useState","getUsers","deleteUser","UserTable","Pagination","SearchBar","FilterPopup","useNavigate","Container","Row","Col","Button","jsxDEV","_jsxDEV","UsersPage","_s","users","setUsers","searchQuery","setSearchQuery","filters","setFilters","sortField","setSortField","sortOrder","setSortOrder","currentPage","setCurrentPage","pageLimit","setPageLimit","navigate","fetchUsers","data","withDept","map","user","index","department","error","alert","handleDelete","id","window","confirm","filter","u","handleSearch","query","handleFilterChange","newFilters","handleSort","field","filteredUsers","firstName","lastName","name","split","matchSearch","toLowerCase","includes","email","matchFirst","matchLast","matchEmail","matchDept","sortedUsers","sort","a","b","valA","valB","startIndex","paginatedUsers","slice","className","children","fileName","_jsxFileName","lineNumber","columnNumber","md","onSearch","onFilterChange","onClick","onDelete","onSort","totalItems","length","onPageChange","onLimitChange","_c","$RefreshReg$"],"sources":["C:/Users/dmayu/OneDrive/Desktop/kanishka/project/extra/user_Dashboard/user_dashboard/src/pages/UsersPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { getUsers, deleteUser } from \"../services/api\";\r\nimport UserTable from \"../components/UserTable\";\r\nimport Pagination from \"../components/Pagination\";\r\nimport SearchBar from \"../components/SearchBar\";\r\nimport FilterPopup from \"../components/FilterPopup\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport { Container, Row, Col, Button } from \"react-bootstrap\";\r\n\r\nconst UsersPage = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [filters, setFilters] = useState({});\r\n  const [sortField, setSortField] = useState(\"\");\r\n  const [sortOrder, setSortOrder] = useState(\"asc\");\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageLimit, setPageLimit] = useState(10);\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => { fetchUsers(); }, []);\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      const data = await getUsers();\r\n      const withDept = data.map((user, index) => ({\r\n        ...user,\r\n        department: [\"IT\", \"HR\", \"Finance\", \"Marketing\"][index % 4],\r\n      }));\r\n      setUsers(withDept);\r\n    } catch (error) { alert(\"Failed to fetch users\"); }\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\r\n    try {\r\n      await deleteUser(id);\r\n      setUsers(users.filter((u) => u.id !== id));\r\n    } catch { alert(\"Failed to delete user\"); }\r\n  };\r\n\r\n  const handleSearch = (query) => { setSearchQuery(query); setCurrentPage(1); };\r\n  const handleFilterChange = (newFilters) => { setFilters(newFilters); setCurrentPage(1); };\r\n  const handleSort = (field) => {\r\n    if (sortField === field) setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\r\n    else { setSortField(field); setSortOrder(\"asc\"); }\r\n  };\r\n\r\n  const filteredUsers = users.filter((user) => {\r\n    const [firstName, lastName] = user.name.split(\" \");\r\n    const matchSearch =\r\n      !searchQuery ||\r\n      user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      user.department.toLowerCase().includes(searchQuery.toLowerCase());\r\n    const matchFirst = !filters.firstName || firstName?.toLowerCase().includes(filters.firstName.toLowerCase());\r\n    const matchLast = !filters.lastName || lastName?.toLowerCase().includes(filters.lastName.toLowerCase());\r\n    const matchEmail = !filters.email || user.email.toLowerCase().includes(filters.email.toLowerCase());\r\n    const matchDept = !filters.department || user.department.toLowerCase() === filters.department.toLowerCase();\r\n    return matchSearch && matchFirst && matchLast && matchEmail && matchDept;\r\n  });\r\n\r\n  const sortedUsers = [...filteredUsers].sort((a, b) => {\r\n    if (!sortField) return 0;\r\n    let valA = a[sortField], valB = b[sortField];\r\n    if (sortField === \"firstName\") { valA = a.name.split(\" \")[0]; valB = b.name.split(\" \")[0]; }\r\n    if (sortField === \"lastName\") { valA = a.name.split(\" \")[1] || \"\"; valB = b.name.split(\" \")[1] || \"\"; }\r\n    if (typeof valA === \"string\") valA = valA.toLowerCase();\r\n    if (typeof valB === \"string\") valB = valB.toLowerCase();\r\n    if (valA < valB) return sortOrder === \"asc\" ? -1 : 1;\r\n    if (valA > valB) return sortOrder === \"asc\" ? 1 : -1;\r\n    return 0;\r\n  });\r\n\r\n  const startIndex = (currentPage - 1) * pageLimit;\r\n  const paginatedUsers = sortedUsers.slice(startIndex, startIndex + pageLimit);\r\n\r\n  return (\r\n    <Container className=\"my-4\">\r\n      <h2 className=\"text-center mb-4\">User Management Dashboard</h2>\r\n      <Row className=\"mb-3 align-items-center\">\r\n        <Col md={4}><SearchBar onSearch={handleSearch} /></Col>\r\n        <Col md={4}><FilterPopup onFilterChange={handleFilterChange} /></Col>\r\n        <Col md={4} className=\"text-md-end mt-2 mt-md-0\">\r\n          <Button onClick={() => navigate(\"/add\")}>+ Add User</Button>\r\n        </Col>\r\n      </Row>\r\n      <UserTable\r\n        users={paginatedUsers}\r\n        onDelete={handleDelete}\r\n        onSort={handleSort}\r\n        sortField={sortField}\r\n        sortOrder={sortOrder}\r\n      />\r\n      <Pagination\r\n        currentPage={currentPage}\r\n        totalItems={sortedUsers.length}\r\n        pageLimit={pageLimit}\r\n        onPageChange={setCurrentPage}\r\n        onLimitChange={setPageLimit}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default UsersPage;\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { getUsers, deleteUser } from \"../services/api\";\r\n// import UserTable from \"../components/UserTable\";\r\n// import Pagination from \"../components/Pagination\";\r\n// import SearchBar from \"../components/SearchBar\";\r\n// import FilterPopup from \"../components/FilterPopup\";\r\n// import { useNavigate, useLocation } from \"react-router-dom\";\r\n// import { Container, Row, Col, Button } from \"react-bootstrap\";\r\n\r\n// const UsersPage = () => {\r\n//   const [users, setUsers] = useState([]);\r\n//   const [searchQuery, setSearchQuery] = useState(\"\");\r\n//   const [filters, setFilters] = useState({});\r\n//   const [sortField, setSortField] = useState(\"\");\r\n//   const [sortOrder, setSortOrder] = useState(\"asc\");\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const [pageLimit, setPageLimit] = useState(10);\r\n//   const navigate = useNavigate();\r\n//   const location = useLocation();\r\n\r\n//   useEffect(() => { fetchUsers(); }, [location]);\r\n\r\n//   const fetchUsers = async () => {\r\n//     try {\r\n//       const data = await getUsers();\r\n//       const withDept = data.map((user, index) => ({\r\n//         ...user,\r\n//         department: [\"IT\", \"HR\", \"Finance\", \"Marketing\"][index % 4],\r\n//       }));\r\n//       setUsers(withDept);\r\n//     } catch (error) { alert(\"Failed to fetch users\"); }\r\n//   };\r\n\r\n//   const handleDelete = async (id) => {\r\n//     if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\r\n//     try {\r\n//       await deleteUser(id);\r\n//       setUsers(users.filter((u) => u.id !== id));\r\n//     } catch { alert(\"Failed to delete user\"); }\r\n//   };\r\n\r\n//   const handleSearch = (query) => { setSearchQuery(query); setCurrentPage(1); };\r\n//   const handleFilterChange = (newFilters) => { setFilters(newFilters); setCurrentPage(1); };\r\n//   const handleSort = (field) => {\r\n//     if (sortField === field) setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\r\n//     else { setSortField(field); setSortOrder(\"asc\"); }\r\n//   };\r\n\r\n//   // Filtering & Sorting & Pagination logic (same as previous version)...\r\n//   const filteredUsers = users.filter((user) => {\r\n//     const [firstName, lastName] = user.name.split(\" \");\r\n//     const matchSearch =\r\n//       !searchQuery ||\r\n//       user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n//       user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n//       user.department.toLowerCase().includes(searchQuery.toLowerCase());\r\n//     const matchFirst = !filters.firstName || firstName?.toLowerCase().includes(filters.firstName.toLowerCase());\r\n//     const matchLast = !filters.lastName || lastName?.toLowerCase().includes(filters.lastName.toLowerCase());\r\n//     const matchEmail = !filters.email || user.email.toLowerCase().includes(filters.email.toLowerCase());\r\n//     const matchDept = !filters.department || user.department.toLowerCase() === filters.department.toLowerCase();\r\n//     return matchSearch && matchFirst && matchLast && matchEmail && matchDept;\r\n//   });\r\n\r\n//   const sortedUsers = [...filteredUsers].sort((a, b) => {\r\n//     if (!sortField) return 0;\r\n//     let valA = a[sortField], valB = b[sortField];\r\n//     if (sortField === \"firstName\") { valA = a.name.split(\" \")[0]; valB = b.name.split(\" \")[0]; }\r\n//     if (sortField === \"lastName\") { valA = a.name.split(\" \")[1] || \"\"; valB = b.name.split(\" \")[1] || \"\"; }\r\n//     if (typeof valA === \"string\") valA = valA.toLowerCase();\r\n//     if (typeof valB === \"string\") valB = valB.toLowerCase();\r\n//     if (valA < valB) return sortOrder === \"asc\" ? -1 : 1;\r\n//     if (valA > valB) return sortOrder === \"asc\" ? 1 : -1;\r\n//     return 0;\r\n//   });\r\n\r\n//   const startIndex = (currentPage - 1) * pageLimit;\r\n//   const paginatedUsers = sortedUsers.slice(startIndex, startIndex + pageLimit);\r\n\r\n//   return (\r\n//     <Container className=\"my-4\">\r\n//       <h2 className=\"text-center mb-4\">User Management Dashboard</h2>\r\n\r\n//       <Row className=\"mb-3 align-items-center\">\r\n//         <Col md={4}><SearchBar onSearch={handleSearch} /></Col>\r\n//         <Col md={4}><FilterPopup onFilterChange={handleFilterChange} /></Col>\r\n//         <Col md={4} className=\"text-md-end mt-2 mt-md-0\">\r\n//           <Button onClick={() => navigate(\"/add\")}>+ Add User</Button>\r\n//         </Col>\r\n//       </Row>\r\n\r\n//       <UserTable users={paginatedUsers} onDelete={handleDelete} onSort={handleSort} />\r\n\r\n//       <Pagination\r\n//         currentPage={currentPage}\r\n//         totalItems={sortedUsers.length}\r\n//         pageLimit={pageLimit}\r\n//         onPageChange={setCurrentPage}\r\n//         onLimitChange={setPageLimit}\r\n//       />\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default UsersPage;\r\n\r\n//=======================\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { getUsers, deleteUser } from \"../services/api\";\r\n// import UserTable from \"../components/UserTable\";\r\n// import Pagination from \"../components/Pagination\";\r\n// import SearchBar from \"../components/SearchBar\";\r\n// import FilterPopup from \"../components/FilterPopup\";\r\n// import { useNavigate, useLocation } from \"react-router-dom\";\r\n\r\n// const UsersPage = () => {\r\n//   const [users, setUsers] = useState([]);\r\n//   const [searchQuery, setSearchQuery] = useState(\"\");\r\n//   const [filters, setFilters] = useState({});\r\n//   const [sortField, setSortField] = useState(\"\");\r\n//   const [sortOrder, setSortOrder] = useState(\"asc\");\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const [pageLimit, setPageLimit] = useState(10);\r\n//   const navigate = useNavigate();\r\n//   const location = useLocation(); // track route changes\r\n\r\n//   // Fetch users whenever location changes (e.g., after add/edit)\r\n//   useEffect(() => {\r\n//     fetchUsers();\r\n//   }, [location]);\r\n\r\n//   const fetchUsers = async () => {\r\n//     try {\r\n//       const data = await getUsers();\r\n//       const withDept = data.map((user, index) => ({\r\n//         ...user,\r\n//         department: [\"IT\", \"HR\", \"Finance\", \"Marketing\"][index % 4],\r\n//       }));\r\n//       setUsers(withDept);\r\n//     } catch (error) {\r\n//       alert(\"Failed to fetch users\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDelete = async (id) => {\r\n//     if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\r\n//     try {\r\n//       await deleteUser(id);\r\n//       setUsers(users.filter((u) => u.id !== id));\r\n//     } catch (error) {\r\n//       alert(\"Failed to delete user\");\r\n//     }\r\n//   };\r\n\r\n//   const handleSearch = (query) => {\r\n//     setSearchQuery(query);\r\n//     setCurrentPage(1);\r\n//   };\r\n\r\n//   const handleFilterChange = (newFilters) => {\r\n//     setFilters(newFilters);\r\n//     setCurrentPage(1);\r\n//   };\r\n\r\n//   const handleSort = (field) => {\r\n//     if (sortField === field) {\r\n//       setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\r\n//     } else {\r\n//       setSortField(field);\r\n//       setSortOrder(\"asc\");\r\n//     }\r\n//   };\r\n\r\n//   // Filtering\r\n//   const filteredUsers = users.filter((user) => {\r\n//     const [firstName, lastName] = user.name.split(\" \");\r\n//     const matchSearch =\r\n//       !searchQuery ||\r\n//       user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n//       user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n//       user.department.toLowerCase().includes(searchQuery.toLowerCase());\r\n\r\n//     const matchFirst =\r\n//       !filters.firstName ||\r\n//       firstName?.toLowerCase().includes(filters.firstName.toLowerCase());\r\n//     const matchLast =\r\n//       !filters.lastName ||\r\n//       lastName?.toLowerCase().includes(filters.lastName.toLowerCase());\r\n//     const matchEmail =\r\n//       !filters.email || user.email.toLowerCase().includes(filters.email.toLowerCase());\r\n//     const matchDept =\r\n//       !filters.department || user.department.toLowerCase() === filters.department.toLowerCase();\r\n\r\n//     return matchSearch && matchFirst && matchLast && matchEmail && matchDept;\r\n//   });\r\n\r\n//   // Sorting\r\n//   const sortedUsers = [...filteredUsers].sort((a, b) => {\r\n//     if (!sortField) return 0;\r\n//     let valA, valB;\r\n//     switch (sortField) {\r\n//       case \"firstName\":\r\n//         valA = a.name.split(\" \")[0];\r\n//         valB = b.name.split(\" \")[0];\r\n//         break;\r\n//       case \"lastName\":\r\n//         valA = a.name.split(\" \")[1] || \"\";\r\n//         valB = b.name.split(\" \")[1] || \"\";\r\n//         break;\r\n//       default:\r\n//         valA = a[sortField];\r\n//         valB = b[sortField];\r\n//     }\r\n//     if (typeof valA === \"string\") valA = valA.toLowerCase();\r\n//     if (typeof valB === \"string\") valB = valB.toLowerCase();\r\n\r\n//     if (valA < valB) return sortOrder === \"asc\" ? -1 : 1;\r\n//     if (valA > valB) return sortOrder === \"asc\" ? 1 : -1;\r\n//     return 0;\r\n//   });\r\n\r\n//   // Pagination\r\n//   const startIndex = (currentPage - 1) * pageLimit;\r\n//   const paginatedUsers = sortedUsers.slice(startIndex, startIndex + pageLimit);\r\n\r\n//   return (\r\n//     <div style={{ padding: \"20px\", maxWidth: \"1200px\", margin: \"auto\" }}>\r\n//       <h2 style={{ textAlign: \"center\" }}>User Management Dashboard</h2>\r\n\r\n//       <div\r\n//         style={{\r\n//           display: \"flex\",\r\n//           justifyContent: \"space-between\",\r\n//           margin: \"20px 0\",\r\n//           flexWrap: \"wrap\",\r\n//           gap: \"10px\",\r\n//         }}\r\n//       >\r\n//         <SearchBar onSearch={handleSearch} />\r\n//         <FilterPopup onFilterChange={handleFilterChange} />\r\n//         <button onClick={() => navigate(\"/add\")}>+ Add User</button>\r\n//       </div>\r\n\r\n//       <UserTable users={paginatedUsers} onDelete={handleDelete} onSort={handleSort} />\r\n\r\n//       <Pagination\r\n//         currentPage={currentPage}\r\n//         totalItems={sortedUsers.length}\r\n//         pageLimit={pageLimit}\r\n//         onPageChange={setCurrentPage}\r\n//         onLimitChange={setPageLimit}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default UsersPage;\r\n\r\n\r\n\r\n//ok-----------------------------------------------------------------------\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { getUsers, deleteUser } from \"../services/api\";\r\n// import UserTable from \"../components/UserTable\";\r\n// import Pagination from \"../components/Pagination\";\r\n// import SearchBar from \"../components/SearchBar\";\r\n// import FilterPopup from \"../components/FilterPopup\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// const UsersPage = () => {\r\n//   const [users, setUsers] = useState([]);\r\n//   const [searchQuery, setSearchQuery] = useState(\"\");\r\n//   const [filters, setFilters] = useState({});\r\n//   const [sortField, setSortField] = useState(\"\");\r\n//   const [sortOrder, setSortOrder] = useState(\"asc\");\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const [pageLimit, setPageLimit] = useState(10);\r\n//   const navigate = useNavigate();\r\n\r\n//   useEffect(() => {\r\n//     fetchUsers();\r\n//   }, []);\r\n\r\n//   const fetchUsers = async () => {\r\n//     try {\r\n//       const data = await getUsers();\r\n//       const withDept = data.map((user, index) => ({\r\n//         ...user,\r\n//         department: [\"IT\", \"HR\", \"Finance\", \"Marketing\"][index % 4],\r\n//       }));\r\n//       setUsers(withDept);\r\n//     } catch (error) {\r\n//       alert(\"Failed to fetch users\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDelete = async (id) => {\r\n//     if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\r\n//     try {\r\n//       await deleteUser(id);\r\n//       setUsers(users.filter((u) => u.id !== id));\r\n//     } catch (error) {\r\n//       alert(\"Failed to delete user\");\r\n//     }\r\n//   };\r\n\r\n//   const handleSearch = (query) => {\r\n//     setSearchQuery(query);\r\n//     setCurrentPage(1);\r\n//   };\r\n\r\n//   const handleFilterChange = (newFilters) => {\r\n//     setFilters(newFilters);\r\n//     setCurrentPage(1);\r\n//   };\r\n\r\n//   const handleSort = (field) => {\r\n//     if (sortField === field) {\r\n//       setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\r\n//     } else {\r\n//       setSortField(field);\r\n//       setSortOrder(\"asc\");\r\n//     }\r\n//   };\r\n\r\n//   const filteredUsers = users.filter((user) => {\r\n//     const [firstName, lastName] = user.name.split(\" \");\r\n//     const matchSearch =\r\n//       !searchQuery ||\r\n//       user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n//       user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n//       user.department.toLowerCase().includes(searchQuery.toLowerCase());\r\n\r\n//     const matchFirst =\r\n//       !filters.firstName ||\r\n//       firstName?.toLowerCase().includes(filters.firstName.toLowerCase());\r\n//     const matchLast =\r\n//       !filters.lastName ||\r\n//       lastName?.toLowerCase().includes(filters.lastName.toLowerCase());\r\n//     const matchEmail =\r\n//       !filters.email ||\r\n//       user.email.toLowerCase().includes(filters.email.toLowerCase());\r\n//     const matchDept =\r\n//       !filters.department ||\r\n//       user.department.toLowerCase() === filters.department.toLowerCase();\r\n\r\n//     return matchSearch && matchFirst && matchLast && matchEmail && matchDept;\r\n//   });\r\n\r\n//   const sortedUsers = [...filteredUsers].sort((a, b) => {\r\n//     if (!sortField) return 0;\r\n//     let valA, valB;\r\n//     switch (sortField) {\r\n//       case \"firstName\":\r\n//         valA = a.name.split(\" \")[0];\r\n//         valB = b.name.split(\" \")[0];\r\n//         break;\r\n//       case \"lastName\":\r\n//         valA = a.name.split(\" \")[1] || \"\";\r\n//         valB = b.name.split(\" \")[1] || \"\";\r\n//         break;\r\n//       default:\r\n//         valA = a[sortField];\r\n//         valB = b[sortField];\r\n//     }\r\n//     if (typeof valA === \"string\") valA = valA.toLowerCase();\r\n//     if (typeof valB === \"string\") valB = valB.toLowerCase();\r\n\r\n//     if (valA < valB) return sortOrder === \"asc\" ? -1 : 1;\r\n//     if (valA > valB) return sortOrder === \"asc\" ? 1 : -1;\r\n//     return 0;\r\n//   });\r\n\r\n//   const startIndex = (currentPage - 1) * pageLimit;\r\n//   const paginatedUsers = sortedUsers.slice(startIndex, startIndex + pageLimit);\r\n\r\n//   return (\r\n//     <div style={{ padding: \"20px\", maxWidth: \"1200px\", margin: \"auto\" }}>\r\n//       <h2 style={{ textAlign: \"center\" }}>User Management Dashboard</h2>\r\n\r\n//       <div style={{ display: \"flex\", justifyContent: \"space-between\", margin: \"20px 0\", flexWrap: \"wrap\", gap: \"10px\" }}>\r\n//         <SearchBar onSearch={handleSearch} />\r\n//         <FilterPopup onFilterChange={handleFilterChange} />\r\n//         <button onClick={() => navigate(\"/add\")}>+ Add User</button>\r\n//       </div>\r\n\r\n//       <UserTable users={paginatedUsers} onDelete={handleDelete} onSort={handleSort} />\r\n\r\n//       <Pagination\r\n//         currentPage={currentPage}\r\n//         totalItems={sortedUsers.length}\r\n//         pageLimit={pageLimit}\r\n//         onPageChange={setCurrentPage}\r\n//         onLimitChange={setPageLimit}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default UsersPage;\r\n\r\n\r\n//==================================================================\r\n//\r\n\r\n// import React, { useEffect, useState, useMemo } from \"react\";\r\n// import { getUsers, deleteUser } from \"../services/api\";\r\n// import UserTable from \"../components/UserTable\";\r\n// import SearchBar from \"../components/SearchBar\";\r\n// import Pagination from \"../components/Pagination\";\r\n// import FilterPopup from \"../components/FilterPopup\";\r\n\r\n// /**\r\n//  * Utility: map JSONPlaceholder user to our model\r\n//  */\r\n// function mapUser(u) {\r\n//   const nameParts = (u.name || \"\").split(\" \");\r\n//   const firstName = nameParts[0] || \"\";\r\n//   const lastName = nameParts.slice(1).join(\" \") || \"\";\r\n//   const department = (u.company && u.company.name) ? u.company.name : \"General\";\r\n//   return {\r\n//     id: u.id,\r\n//     firstName,\r\n//     lastName,\r\n//     email: u.email || \"\",\r\n//     department,\r\n//     // keep original raw for edits if needed\r\n//     raw: u,\r\n//   };\r\n// }\r\n\r\n// export default function UsersPage() {\r\n//   const [rawUsers, setRawUsers] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   // UI states\r\n//   const [search, setSearch] = useState(\"\");\r\n//   const [filters, setFilters] = useState({ firstName: \"\", lastName: \"\", email: \"\", department: \"\" });\r\n//   const [filterPopupOpen, setFilterPopupOpen] = useState(false);\r\n//   const [pageSize, setPageSize] = useState(10);\r\n//   const [page, setPage] = useState(1);\r\n//   const [sortConfig, setSortConfig] = useState({ key: \"id\", direction: \"asc\" });\r\n\r\n//   useEffect(() => {\r\n//     fetchUsers();\r\n//   }, []);\r\n\r\n//   // Fetch users from API\r\n//   async function fetchUsers() {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const data = await getUsers();\r\n//       // map to our simpler model\r\n//       setRawUsers(data.map(mapUser));\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       setError(err.message || \"Error fetching users\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   }\r\n\r\n//   // Delete user handler\r\n//   async function handleDelete(id) {\r\n//     try {\r\n//       await deleteUser(id); // simulated\r\n//       // remove locally to reflect UI changes\r\n//       setRawUsers((prev) => prev.filter((u) => u.id !== id));\r\n//       alert(\"User deleted (simulated)\"); // simple notification\r\n//     } catch (err) {\r\n//       alert(\"Failed to delete user: \" + err.message);\r\n//     }\r\n//   }\r\n\r\n//   // Sort handler (toggle)\r\n//   function handleSort(key) {\r\n//     setSortConfig((prev) => {\r\n//       if (prev.key === key) {\r\n//         return { key, direction: prev.direction === \"asc\" ? \"desc\" : \"asc\" };\r\n//       } else {\r\n//         return { key, direction: \"asc\" };\r\n//       }\r\n//     });\r\n//   }\r\n\r\n//   // Apply filters + search + sort\r\n//   const processed = useMemo(() => {\r\n//     // start with rawUsers\r\n//     let items = [...rawUsers];\r\n\r\n//     // filter popup fields (exact/contains)\r\n//     if (filters.firstName) {\r\n//       items = items.filter((u) => u.firstName.toLowerCase().includes(filters.firstName.toLowerCase()));\r\n//     }\r\n//     if (filters.lastName) {\r\n//       items = items.filter((u) => u.lastName.toLowerCase().includes(filters.lastName.toLowerCase()));\r\n//     }\r\n//     if (filters.email) {\r\n//       items = items.filter((u) => u.email.toLowerCase().includes(filters.email.toLowerCase()));\r\n//     }\r\n//     if (filters.department) {\r\n//       items = items.filter((u) => u.department.toLowerCase().includes(filters.department.toLowerCase()));\r\n//     }\r\n\r\n//     // global search across fields\r\n//     if (search && search.trim() !== \"\") {\r\n//       const q = search.toLowerCase();\r\n//       items = items.filter((u) =>\r\n//         u.firstName.toLowerCase().includes(q) ||\r\n//         u.lastName.toLowerCase().includes(q) ||\r\n//         u.email.toLowerCase().includes(q) ||\r\n//         u.department.toLowerCase().includes(q)\r\n//       );\r\n//     }\r\n\r\n//     // sort\r\n//     const { key, direction } = sortConfig || {};\r\n//     if (key) {\r\n//       items.sort((a, b) => {\r\n//         const va = (a[key] || \"\").toString().toLowerCase();\r\n//         const vb = (b[key] || \"\").toString().toLowerCase();\r\n//         if (va < vb) return direction === \"asc\" ? -1 : 1;\r\n//         if (va > vb) return direction === \"asc\" ? 1 : -1;\r\n//         return 0;\r\n//       });\r\n//     }\r\n\r\n//     return items;\r\n//   }, [rawUsers, search, filters, sortConfig]);\r\n\r\n//   // pagination calculations\r\n//   const totalItems = processed.length;\r\n//   const totalPages = Math.max(1, Math.ceil(totalItems / pageSize));\r\n//   // adjust page if current page out of range\r\n//   useEffect(() => {\r\n//     if (page > totalPages) setPage(totalPages);\r\n//   }, [totalPages, page]);\r\n\r\n//   const currentData = processed.slice((page - 1) * pageSize, page * pageSize);\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className=\"d-flex flex-column flex-md-row align-items-start gap-3 justify-content-between mb-3\">\r\n//         <div style={{ flex: 1, minWidth: 280 }}>\r\n//           <SearchBar value={search} onChange={(v) => { setSearch(v); setPage(1); }} />\r\n//         </div>\r\n\r\n//         <div className=\"d-flex gap-2 align-items-center\">\r\n//           <div>\r\n//             <select className=\"form-select\" value={pageSize} onChange={(e) => { setPageSize(Number(e.target.value)); setPage(1); }}>\r\n//               {[10, 25, 50, 100].map((n) => <option key={n} value={n}>{n} / page</option>)}\r\n//             </select>\r\n//           </div>\r\n\r\n//           <button className=\"btn btn-outline-secondary\" onClick={() => setFilterPopupOpen(true)}>Filter</button>\r\n//           <button className=\"btn btn-outline-success\" onClick={fetchUsers}>Refresh</button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {loading && <div className=\"alert alert-info\">Loading users...</div>}\r\n//       {error && <div className=\"alert alert-danger\">{error}</div>}\r\n\r\n//       <UserTable users={currentData} onDelete={handleDelete} onSort={handleSort} sortConfig={sortConfig} />\r\n\r\n//       <div className=\"d-flex justify-content-between align-items-center\">\r\n//         <div><small>Showing {(page - 1) * pageSize + 1} - {Math.min(totalItems, page * pageSize)} of {totalItems} users</small></div>\r\n//         <Pagination currentPage={page} totalPages={totalPages} onPageChange={(p) => setPage(p)} />\r\n//       </div>\r\n\r\n//       <FilterPopup visible={filterPopupOpen} onClose={() => setFilterPopupOpen(false)} onApply={(f) => { setFilters(f); setPage(1); }} initialFilters={filters} />\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappings":"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A;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA,IAAA4E,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}