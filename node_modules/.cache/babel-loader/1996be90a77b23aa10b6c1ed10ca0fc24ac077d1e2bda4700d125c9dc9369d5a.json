{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dmayu\\\\OneDrive\\\\Desktop\\\\kanishka\\\\project\\\\extra\\\\user_Dashboard\\\\user_dashboard\\\\src\\\\components\\\\Pagination.jsx\";\nimport React from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Pagination = ({\n  total,\n  limit,\n  currentPage,\n  setCurrentPage\n}) => {\n  const totalPages = Math.ceil(total / limit);\n  const pages = [...Array(totalPages).keys()].map(i => i + 1);\n  return /*#__PURE__*/_jsxDEV(\"nav\", {\n    children: /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"pagination\",\n      children: pages.map(page => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: `page-item ${currentPage === page ? \"active\" : \"\"}`,\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          className: \"page-link\",\n          onClick: () => setCurrentPage(page),\n          children: page\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 13\n        }, this)\n      }, page, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n};\n_c = Pagination;\nexport default Pagination;\n\n//working--------------------\n\n// import React from \"react\";\n\n// const Pagination = ({ currentPage, totalItems, pageLimit, onPageChange, onLimitChange }) => {\n//   const totalPages = Math.ceil(totalItems / pageLimit);\n//   const pages = [];\n//   for (let i = 1; i <= totalPages; i++) pages.push(i);\n\n//   return (\n//     <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", marginTop: \"20px\", flexWrap: \"wrap\", gap: \"10px\" }}>\n//       <div>\n//         <label>Rows per page: </label>\n//         <select value={pageLimit} onChange={(e) => onLimitChange(Number(e.target.value))}>\n//           {[10, 25, 50, 100].map((n) => (\n//             <option key={n} value={n}>{n}</option>\n//           ))}\n//         </select>\n//       </div>\n\n//       <div style={{ display: \"flex\", gap: \"5px\", flexWrap: \"wrap\" }}>\n//         {pages.map((num) => (\n//           <button\n//             key={num}\n//             onClick={() => onPageChange(num)}\n//             style={{\n//               padding: \"5px 10px\",\n//               backgroundColor: num === currentPage ? \"#007bff\" : \"#f0f0f0\",\n//               color: num === currentPage ? \"#fff\" : \"#000\",\n//               border: \"none\",\n//               borderRadius: \"4px\",\n//               cursor: \"pointer\",\n//             }}\n//           >\n//             {num}\n//           </button>\n//         ))}\n//       </div>\n//     </div>\n//   );\n// };\n\n// export default Pagination;\n\n//=====================================\n\n// import React from \"react\";\n\n// /**\n//  * Pagination component\n//  * Props:\n//  *  - currentPage\n//  *  - totalPages\n//  *  - onPageChange (page)\n//  */\n// export default function Pagination({ currentPage, totalPages, onPageChange }) {\n//   if (totalPages <= 1) return null;\n\n//   const pages = [];\n//   // simple pagination: show up to 7 page numbers around current\n//   let start = Math.max(1, currentPage - 3);\n//   let end = Math.min(totalPages, currentPage + 3);\n//   if (end - start < 6) {\n//     if (start === 1) end = Math.min(totalPages, start + 6);\n//     if (end === totalPages) start = Math.max(1, end - 6);\n//   }\n\n//   for (let p = start; p <= end; p++) pages.push(p);\n\n//   return (\n//     <nav>\n//       <ul className=\"pagination\">\n//         <li className={`page-item ${currentPage === 1 ? \"disabled\" : \"\"}`}>\n//           <button className=\"page-link\" onClick={() => onPageChange(currentPage - 1)}>Previous</button>\n//         </li>\n//         {start > 1 && (\n//           <>\n//             <li className=\"page-item\"><button className=\"page-link\" onClick={() => onPageChange(1)}>1</button></li>\n//             {start > 2 && <li className=\"page-item disabled\"><span className=\"page-link\">...</span></li>}\n//           </>\n//         )}\n//         {pages.map((p) => (\n//           <li key={p} className={`page-item ${p === currentPage ? \"active\" : \"\"}`}>\n//             <button className=\"page-link\" onClick={() => onPageChange(p)}>{p}</button>\n//           </li>\n//         ))}\n//         {end < totalPages && (\n//           <>\n//             {end < totalPages - 1 && <li className=\"page-item disabled\"><span className=\"page-link\">...</span></li>}\n//             <li className=\"page-item\"><button className=\"page-link\" onClick={() => onPageChange(totalPages)}>{totalPages}</button></li>\n//           </>\n//         )}\n//         <li className={`page-item ${currentPage === totalPages ? \"disabled\" : \"\"}`}>\n//           <button className=\"page-link\" onClick={() => onPageChange(currentPage + 1)}>Next</button>\n//         </li>\n//       </ul>\n//     </nav>\n//   );\n// }\nvar _c;\n$RefreshReg$(_c, \"Pagination\");","map":{"version":3,"names":["React","jsxDEV","_jsxDEV","Pagination","total","limit","currentPage","setCurrentPage","totalPages","Math","ceil","pages","Array","keys","map","i","children","className","page","onClick","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/dmayu/OneDrive/Desktop/kanishka/project/extra/user_Dashboard/user_dashboard/src/components/Pagination.jsx"],"sourcesContent":["import React from \"react\";\r\n\r\nconst Pagination = ({ total, limit, currentPage, setCurrentPage }) => {\r\n  const totalPages = Math.ceil(total / limit);\r\n  const pages = [...Array(totalPages).keys()].map((i) => i + 1);\r\n\r\n  return (\r\n    <nav>\r\n      <ul className=\"pagination\">\r\n        {pages.map((page) => (\r\n          <li key={page} className={`page-item ${currentPage === page ? \"active\" : \"\"}`}>\r\n            <button className=\"page-link\" onClick={() => setCurrentPage(page)}>\r\n              {page}\r\n            </button>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Pagination;\r\n\r\n\r\n\r\n//working--------------------\r\n\r\n// import React from \"react\";\r\n\r\n// const Pagination = ({ currentPage, totalItems, pageLimit, onPageChange, onLimitChange }) => {\r\n//   const totalPages = Math.ceil(totalItems / pageLimit);\r\n//   const pages = [];\r\n//   for (let i = 1; i <= totalPages; i++) pages.push(i);\r\n\r\n//   return (\r\n//     <div style={{ display: \"flex\", justifyContent: \"space-between\", alignItems: \"center\", marginTop: \"20px\", flexWrap: \"wrap\", gap: \"10px\" }}>\r\n//       <div>\r\n//         <label>Rows per page: </label>\r\n//         <select value={pageLimit} onChange={(e) => onLimitChange(Number(e.target.value))}>\r\n//           {[10, 25, 50, 100].map((n) => (\r\n//             <option key={n} value={n}>{n}</option>\r\n//           ))}\r\n//         </select>\r\n//       </div>\r\n\r\n//       <div style={{ display: \"flex\", gap: \"5px\", flexWrap: \"wrap\" }}>\r\n//         {pages.map((num) => (\r\n//           <button\r\n//             key={num}\r\n//             onClick={() => onPageChange(num)}\r\n//             style={{\r\n//               padding: \"5px 10px\",\r\n//               backgroundColor: num === currentPage ? \"#007bff\" : \"#f0f0f0\",\r\n//               color: num === currentPage ? \"#fff\" : \"#000\",\r\n//               border: \"none\",\r\n//               borderRadius: \"4px\",\r\n//               cursor: \"pointer\",\r\n//             }}\r\n//           >\r\n//             {num}\r\n//           </button>\r\n//         ))}\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default Pagination;\r\n\r\n//=====================================\r\n\r\n// import React from \"react\";\r\n\r\n// /**\r\n//  * Pagination component\r\n//  * Props:\r\n//  *  - currentPage\r\n//  *  - totalPages\r\n//  *  - onPageChange (page)\r\n//  */\r\n// export default function Pagination({ currentPage, totalPages, onPageChange }) {\r\n//   if (totalPages <= 1) return null;\r\n\r\n//   const pages = [];\r\n//   // simple pagination: show up to 7 page numbers around current\r\n//   let start = Math.max(1, currentPage - 3);\r\n//   let end = Math.min(totalPages, currentPage + 3);\r\n//   if (end - start < 6) {\r\n//     if (start === 1) end = Math.min(totalPages, start + 6);\r\n//     if (end === totalPages) start = Math.max(1, end - 6);\r\n//   }\r\n\r\n//   for (let p = start; p <= end; p++) pages.push(p);\r\n\r\n//   return (\r\n//     <nav>\r\n//       <ul className=\"pagination\">\r\n//         <li className={`page-item ${currentPage === 1 ? \"disabled\" : \"\"}`}>\r\n//           <button className=\"page-link\" onClick={() => onPageChange(currentPage - 1)}>Previous</button>\r\n//         </li>\r\n//         {start > 1 && (\r\n//           <>\r\n//             <li className=\"page-item\"><button className=\"page-link\" onClick={() => onPageChange(1)}>1</button></li>\r\n//             {start > 2 && <li className=\"page-item disabled\"><span className=\"page-link\">...</span></li>}\r\n//           </>\r\n//         )}\r\n//         {pages.map((p) => (\r\n//           <li key={p} className={`page-item ${p === currentPage ? \"active\" : \"\"}`}>\r\n//             <button className=\"page-link\" onClick={() => onPageChange(p)}>{p}</button>\r\n//           </li>\r\n//         ))}\r\n//         {end < totalPages && (\r\n//           <>\r\n//             {end < totalPages - 1 && <li className=\"page-item disabled\"><span className=\"page-link\">...</span></li>}\r\n//             <li className=\"page-item\"><button className=\"page-link\" onClick={() => onPageChange(totalPages)}>{totalPages}</button></li>\r\n//           </>\r\n//         )}\r\n//         <li className={`page-item ${currentPage === totalPages ? \"disabled\" : \"\"}`}>\r\n//           <button className=\"page-link\" onClick={() => onPageChange(currentPage + 1)}>Next</button>\r\n//         </li>\r\n//       </ul>\r\n//     </nav>\r\n//   );\r\n// }\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,UAAU,GAAGA,CAAC;EAAEC,KAAK;EAAEC,KAAK;EAAEC,WAAW;EAAEC;AAAe,CAAC,KAAK;EACpE,MAAMC,UAAU,GAAGC,IAAI,CAACC,IAAI,CAACN,KAAK,GAAGC,KAAK,CAAC;EAC3C,MAAMM,KAAK,GAAG,CAAC,GAAGC,KAAK,CAACJ,UAAU,CAAC,CAACK,IAAI,CAAC,CAAC,CAAC,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,GAAG,CAAC,CAAC;EAE7D,oBACEb,OAAA;IAAAc,QAAA,eACEd,OAAA;MAAIe,SAAS,EAAC,YAAY;MAAAD,QAAA,EACvBL,KAAK,CAACG,GAAG,CAAEI,IAAI,iBACdhB,OAAA;QAAee,SAAS,EAAE,aAAaX,WAAW,KAAKY,IAAI,GAAG,QAAQ,GAAG,EAAE,EAAG;QAAAF,QAAA,eAC5Ed,OAAA;UAAQe,SAAS,EAAC,WAAW;UAACE,OAAO,EAAEA,CAAA,KAAMZ,cAAc,CAACW,IAAI,CAAE;UAAAF,QAAA,EAC/DE;QAAI;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACC;MAAC,GAHFL,IAAI;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAIT,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV,CAAC;AAACC,EAAA,GAjBIrB,UAAU;AAmBhB,eAAeA,UAAU;;AAIzB;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}