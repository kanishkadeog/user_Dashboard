{"ast":null,"code":"\n\n//==========================\n\n// import React, { useState, useEffect } from \"react\";\n// import { Container, Row, Col, Button } from \"react-bootstrap\";\n// import UserTable from \"../components/UserTable\";\n// import { getUsers, deleteUser } from \"../services/api\";\n// import { useNavigate } from \"react-router-dom\";\n// import FilterPopup from \"../components/FilterPopup\";\n\n// const UsersPage = () => {\n//   // State to store all users fetched from API\n//   const [users, setUsers] = useState([]);\n//   // State to store filtered/search results\n//   const [filteredUsers, setFilteredUsers] = useState([]);\n//   // State for search input value\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   // State to toggle filter popup\n//   const [showFilter, setShowFilter] = useState(false);\n//   // State to track sorting key and direction\n//   const [sortConfig, setSortConfig] = useState({ key: \"id\", direction: \"asc\" });\n\n//   const navigate = useNavigate();\n\n//   // Fetch users when component mounts\n//   useEffect(() => {\n//     fetchUsers();\n//   }, []);\n\n//   // Function to fetch users from API\n//   const fetchUsers = async () => {\n//     try {\n//       const data = await getUsers();\n//       // Enrich data: use company.name as department\n//       const enrichedData = data.map((user) => ({\n//         ...user,\n//         department: user.company?.name || \"N/A\",\n//       }));\n//       setUsers(enrichedData);\n//       setFilteredUsers(enrichedData);\n//     } catch {\n//       alert(\"Error fetching users\");\n//     }\n//   };\n\n//   // Delete user by ID\n//   const handleDelete = async (id) => {\n//     if (window.confirm(\"Are you sure to delete this user?\")) {\n//       try {\n//         await deleteUser(id);\n//         // Remove deleted user from state\n//         const updatedUsers = users.filter((u) => u.id !== id);\n//         setUsers(updatedUsers);\n//         setFilteredUsers(updatedUsers);\n//       } catch {\n//         alert(\"Error deleting user\");\n//       }\n//     }\n//   };\n\n//   // Handle search input\n//   const handleSearch = (query) => {\n//     setSearchQuery(query);\n//     const filtered = users.filter((user) => {\n//       return (\n//         user.name.toLowerCase().includes(query.toLowerCase()) ||\n//         user.email.toLowerCase().includes(query.toLowerCase()) ||\n//         user.department.toLowerCase().includes(query.toLowerCase())\n//       );\n//     });\n//     setFilteredUsers(filtered);\n//   };\n\n//   // Apply filter from FilterPopup\n//   const handleFilter = (filters) => {\n//     const filtered = users.filter((user) => {\n//       return (\n//         (!filters.name || user.name.toLowerCase().includes(filters.name.toLowerCase())) &&\n//         (!filters.email || user.email.toLowerCase().includes(filters.email.toLowerCase())) &&\n//         (!filters.department || user.department.toLowerCase().includes(filters.department.toLowerCase()))\n//       );\n//     });\n//     setFilteredUsers(filtered || []);\n//     setShowFilter(false); // Close filter popup\n//   };\n\n//   // Clear filters and show all users\n//   const handleClearFilter = () => {\n//     setFilteredUsers(users);\n//   };\n\n//   // Handle sorting by column\n//   const handleSort = (key) => {\n//     let direction = \"asc\";\n//     if (sortConfig.key === key && sortConfig.direction === \"asc\") direction = \"desc\";\n//     setSortConfig({ key, direction });\n//   };\n\n//   // Sort users based on sortConfig\n//   const sortedUsers = [...filteredUsers].sort((a, b) => {\n//     const { key, direction } = sortConfig;\n//     let compareA = a[key];\n//     let compareB = b[key];\n//     if (key === \"id\") {\n//       compareA = Number(compareA);\n//       compareB = Number(compareB);\n//     } else {\n//       compareA = compareA.toLowerCase();\n//       compareB = compareB.toLowerCase();\n//     }\n//     if (compareA < compareB) return direction === \"asc\" ? -1 : 1;\n//     if (compareA > compareB) return direction === \"asc\" ? 1 : -1;\n//     return 0;\n//   });\n\n//   return (\n//     <Container className=\"mt-4\">\n//       <Row className=\"mb-3\">\n\n//         <Col className=\"text-end\">\n//           {/* Button to navigate to Add User page */}\n//           <Button variant=\"primary\" onClick={() => navigate(\"/add\")}>Add User</Button>{\" \"}\n//           {/* Toggle filter popup */}\n//           <Button variant=\"secondary\" onClick={() => setShowFilter(!showFilter)}>Filter</Button>{\" \"}\n//           {/* Clear applied filters */}\n//           <Button variant=\"outline-secondary\" onClick={handleClearFilter}>Clear Filter</Button>\n//         </Col>\n//       </Row>\n\n//       {/* Show FilterPopup if toggled */}\n//       {showFilter && <FilterPopup onApply={handleFilter} onClose={() => setShowFilter(false)} />}\n\n//       {/* UserTable component to display users */}\n//   {sortedUsers.length === 0 ? (\n//   <div className=\"text-center p-3\">\n//         <h4 className=\"text-center mb-4 text-danger\">No users found</h4>\n\n//   </div>\n// ) : (\n//   <UserTable\n//     users={sortedUsers}\n//     onDelete={handleDelete}\n//     onEdit={(id) => navigate(`/edit/${id}`)}\n//     onSearch={handleSearch}\n//     onSort={handleSort}\n//     sortConfig={sortConfig}\n//   />\n// )}\n\n//       {/* <UserTable\n//         users={sortedUsers}\n//         onDelete={handleDelete}\n//         onEdit={(id) => navigate(`/edit/${id}`)}\n//         onSearch={handleSearch}\n//         onSort={handleSort}\n//         sortConfig={sortConfig}\n//       /> */}\n\n//     </Container>\n//   );\n// };\n\n// export default UsersPage;","map":{"version":3,"names":[],"sources":["C:/Users/dmayu/OneDrive/Desktop/kanishka/project/extra/user_Dashboard/user_dashboard/src/pages/UsersPage.jsx"],"sourcesContent":["\r\n\r\n\r\n\r\n//==========================\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import { Container, Row, Col, Button } from \"react-bootstrap\";\r\n// import UserTable from \"../components/UserTable\";\r\n// import { getUsers, deleteUser } from \"../services/api\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import FilterPopup from \"../components/FilterPopup\";\r\n\r\n// const UsersPage = () => {\r\n//   // State to store all users fetched from API\r\n//   const [users, setUsers] = useState([]);\r\n//   // State to store filtered/search results\r\n//   const [filteredUsers, setFilteredUsers] = useState([]);\r\n//   // State for search input value\r\n//   const [searchQuery, setSearchQuery] = useState(\"\");\r\n//   // State to toggle filter popup\r\n//   const [showFilter, setShowFilter] = useState(false);\r\n//   // State to track sorting key and direction\r\n//   const [sortConfig, setSortConfig] = useState({ key: \"id\", direction: \"asc\" });\r\n\r\n//   const navigate = useNavigate();\r\n\r\n//   // Fetch users when component mounts\r\n//   useEffect(() => {\r\n//     fetchUsers();\r\n//   }, []);\r\n\r\n//   // Function to fetch users from API\r\n//   const fetchUsers = async () => {\r\n//     try {\r\n//       const data = await getUsers();\r\n//       // Enrich data: use company.name as department\r\n//       const enrichedData = data.map((user) => ({\r\n//         ...user,\r\n//         department: user.company?.name || \"N/A\",\r\n//       }));\r\n//       setUsers(enrichedData);\r\n//       setFilteredUsers(enrichedData);\r\n//     } catch {\r\n//       alert(\"Error fetching users\");\r\n//     }\r\n//   };\r\n\r\n//   // Delete user by ID\r\n//   const handleDelete = async (id) => {\r\n//     if (window.confirm(\"Are you sure to delete this user?\")) {\r\n//       try {\r\n//         await deleteUser(id);\r\n//         // Remove deleted user from state\r\n//         const updatedUsers = users.filter((u) => u.id !== id);\r\n//         setUsers(updatedUsers);\r\n//         setFilteredUsers(updatedUsers);\r\n//       } catch {\r\n//         alert(\"Error deleting user\");\r\n//       }\r\n//     }\r\n//   };\r\n\r\n//   // Handle search input\r\n//   const handleSearch = (query) => {\r\n//     setSearchQuery(query);\r\n//     const filtered = users.filter((user) => {\r\n//       return (\r\n//         user.name.toLowerCase().includes(query.toLowerCase()) ||\r\n//         user.email.toLowerCase().includes(query.toLowerCase()) ||\r\n//         user.department.toLowerCase().includes(query.toLowerCase())\r\n//       );\r\n//     });\r\n//     setFilteredUsers(filtered);\r\n//   };\r\n\r\n//   // Apply filter from FilterPopup\r\n//   const handleFilter = (filters) => {\r\n//     const filtered = users.filter((user) => {\r\n//       return (\r\n//         (!filters.name || user.name.toLowerCase().includes(filters.name.toLowerCase())) &&\r\n//         (!filters.email || user.email.toLowerCase().includes(filters.email.toLowerCase())) &&\r\n//         (!filters.department || user.department.toLowerCase().includes(filters.department.toLowerCase()))\r\n//       );\r\n//     });\r\n//     setFilteredUsers(filtered || []);\r\n//     setShowFilter(false); // Close filter popup\r\n//   };\r\n\r\n//   // Clear filters and show all users\r\n//   const handleClearFilter = () => {\r\n//     setFilteredUsers(users);\r\n//   };\r\n\r\n//   // Handle sorting by column\r\n//   const handleSort = (key) => {\r\n//     let direction = \"asc\";\r\n//     if (sortConfig.key === key && sortConfig.direction === \"asc\") direction = \"desc\";\r\n//     setSortConfig({ key, direction });\r\n//   };\r\n\r\n//   // Sort users based on sortConfig\r\n//   const sortedUsers = [...filteredUsers].sort((a, b) => {\r\n//     const { key, direction } = sortConfig;\r\n//     let compareA = a[key];\r\n//     let compareB = b[key];\r\n//     if (key === \"id\") {\r\n//       compareA = Number(compareA);\r\n//       compareB = Number(compareB);\r\n//     } else {\r\n//       compareA = compareA.toLowerCase();\r\n//       compareB = compareB.toLowerCase();\r\n//     }\r\n//     if (compareA < compareB) return direction === \"asc\" ? -1 : 1;\r\n//     if (compareA > compareB) return direction === \"asc\" ? 1 : -1;\r\n//     return 0;\r\n//   });\r\n\r\n//   return (\r\n//     <Container className=\"mt-4\">\r\n//       <Row className=\"mb-3\">\r\n        \r\n//         <Col className=\"text-end\">\r\n//           {/* Button to navigate to Add User page */}\r\n//           <Button variant=\"primary\" onClick={() => navigate(\"/add\")}>Add User</Button>{\" \"}\r\n//           {/* Toggle filter popup */}\r\n//           <Button variant=\"secondary\" onClick={() => setShowFilter(!showFilter)}>Filter</Button>{\" \"}\r\n//           {/* Clear applied filters */}\r\n//           <Button variant=\"outline-secondary\" onClick={handleClearFilter}>Clear Filter</Button>\r\n//         </Col>\r\n//       </Row>\r\n\r\n//       {/* Show FilterPopup if toggled */}\r\n//       {showFilter && <FilterPopup onApply={handleFilter} onClose={() => setShowFilter(false)} />}\r\n\r\n      \r\n//       {/* UserTable component to display users */}\r\n//   {sortedUsers.length === 0 ? (\r\n//   <div className=\"text-center p-3\">\r\n//         <h4 className=\"text-center mb-4 text-danger\">No users found</h4>\r\n\r\n//   </div>\r\n// ) : (\r\n//   <UserTable\r\n//     users={sortedUsers}\r\n//     onDelete={handleDelete}\r\n//     onEdit={(id) => navigate(`/edit/${id}`)}\r\n//     onSearch={handleSearch}\r\n//     onSort={handleSort}\r\n//     sortConfig={sortConfig}\r\n//   />\r\n// )}\r\n\r\n//       {/* <UserTable\r\n//         users={sortedUsers}\r\n//         onDelete={handleDelete}\r\n//         onEdit={(id) => navigate(`/edit/${id}`)}\r\n//         onSearch={handleSearch}\r\n//         onSort={handleSort}\r\n//         sortConfig={sortConfig}\r\n//       /> */}\r\n    \r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default UsersPage;\r\n"],"mappings":";;AAIA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}