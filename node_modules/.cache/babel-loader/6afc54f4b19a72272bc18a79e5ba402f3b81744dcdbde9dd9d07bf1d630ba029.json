{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dmayu\\\\OneDrive\\\\Desktop\\\\kanishka\\\\project\\\\extra\\\\user_Dashboard\\\\user_dashboard\\\\src\\\\pages\\\\UsersPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { getUsers, deleteUser } from \"../services/api\";\nimport UserTable from \"../components/UserTable\";\nimport Pagination from \"../components/Pagination\";\nimport SearchBar from \"../components/SearchBar\";\nimport FilterPopup from \"../components/FilterPopup\";\nimport { Button, Toast, ToastContainer } from \"react-bootstrap\";\nimport { useNavigate } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst UsersPage = () => {\n  _s();\n  const [users, setUsers] = useState([]);\n  const [filteredUsers, setFilteredUsers] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [pageLimit, setPageLimit] = useState(10);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [showFilter, setShowFilter] = useState(false);\n  const [toastMsg, setToastMsg] = useState(\"\");\n  const [sortField, setSortField] = useState(\"id\");\n  const [sortOrder, setSortOrder] = useState(\"asc\");\n  const navigate = useNavigate();\n  useEffect(() => {\n    fetchUsers();\n  }, []);\n  const fetchUsers = async () => {\n    try {\n      const data = await getUsers();\n      const deptData = data.map(u => ({\n        ...u,\n        department: [\"IT\", \"HR\", \"Sales\"][u.id % 3]\n      }));\n      setUsers(deptData);\n      setFilteredUsers(deptData);\n    } catch (error) {\n      showToast(\"Error fetching users\");\n    }\n  };\n  const showToast = msg => {\n    setToastMsg(msg);\n    setTimeout(() => setToastMsg(\"\"), 3000);\n  };\n  const handleDelete = async id => {\n    if (window.confirm(\"Are you sure to delete?\")) {\n      try {\n        await deleteUser(id);\n        const newList = users.filter(u => u.id !== id);\n        setUsers(newList);\n        setFilteredUsers(newList);\n        showToast(\"User deleted successfully\");\n      } catch {\n        showToast(\"Error deleting user\");\n      }\n    }\n  };\n  const handleFilter = filterData => {\n    let filtered = users.filter(u => {\n      const [firstName, lastName] = u.name.split(\" \");\n      return u.email.toLowerCase().includes(filterData.email.toLowerCase()) && u.department.toLowerCase().includes(filterData.department.toLowerCase()) && firstName.toLowerCase().includes(filterData.firstName.toLowerCase()) && (lastName || \"\").toLowerCase().includes(filterData.lastName.toLowerCase());\n    });\n    setFilteredUsers(filtered);\n  };\n  const handleSort = field => {\n    const order = sortField === field && sortOrder === \"asc\" ? \"desc\" : \"asc\";\n    const sorted = [...filteredUsers].sort((a, b) => {\n      let valA, valB;\n      if (field === \"firstName\") {\n        valA = a.name.split(\" \")[0].toLowerCase();\n        valB = b.name.split(\" \")[0].toLowerCase();\n      } else if (field === \"lastName\") {\n        valA = (a.name.split(\" \")[1] || \"\").toLowerCase();\n        valB = (b.name.split(\" \")[1] || \"\").toLowerCase();\n      } else {\n        valA = (a[field] || \"\").toString().toLowerCase();\n        valB = (b[field] || \"\").toString().toLowerCase();\n      }\n      if (valA < valB) return order === \"asc\" ? -1 : 1;\n      if (valA > valB) return order === \"asc\" ? 1 : -1;\n      return 0;\n    });\n    setSortField(field);\n    setSortOrder(order);\n    setFilteredUsers(sorted);\n  };\n  const handleSearch = query => {\n    setSearchQuery(query);\n    const filtered = users.filter(u => {\n      const [firstName, lastName] = u.name.split(\" \");\n      return firstName.toLowerCase().includes(query.toLowerCase()) || (lastName || \"\").toLowerCase().includes(query.toLowerCase()) || u.email.toLowerCase().includes(query.toLowerCase()) || u.department.toLowerCase().includes(query.toLowerCase());\n    });\n    setFilteredUsers(filtered);\n  };\n  const paginatedUsers = filteredUsers.slice((currentPage - 1) * pageLimit, currentPage * pageLimit);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-between mb-2\",\n      children: [/*#__PURE__*/_jsxDEV(Button, {\n        variant: \"success\",\n        onClick: () => navigate(\"/add\"),\n        children: \"Add User\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          variant: \"info\",\n          onClick: () => setShowFilter(true),\n          className: \"me-2\",\n          children: \"Filter\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n          value: pageLimit,\n          onChange: e => setPageLimit(Number(e.target.value)),\n          className: \"form-select d-inline-block w-auto\",\n          children: [10, 25, 50, 100].map(n => /*#__PURE__*/_jsxDEV(\"option\", {\n            value: n,\n            children: n\n          }, n, false, {\n            fileName: _jsxFileName,\n            lineNumber: 120,\n            columnNumber: 15\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 118,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(SearchBar, {\n      searchQuery: searchQuery,\n      setSearchQuery: handleSearch\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 127,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(UserTable, {\n      users: paginatedUsers,\n      onDelete: handleDelete,\n      onSort: handleSort,\n      sortField: sortField,\n      sortOrder: sortOrder\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Pagination, {\n      total: filteredUsers.length,\n      limit: pageLimit,\n      currentPage: currentPage,\n      setCurrentPage: setCurrentPage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FilterPopup, {\n      show: showFilter,\n      handleClose: () => setShowFilter(false),\n      applyFilter: handleFilter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ToastContainer, {\n      position: \"top-end\",\n      className: \"p-3\",\n      children: toastMsg && /*#__PURE__*/_jsxDEV(Toast, {\n        onClose: () => setToastMsg(\"\"),\n        show: !!toastMsg,\n        delay: 2000,\n        autohide: true,\n        children: toastMsg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 22\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 109,\n    columnNumber: 5\n  }, this);\n};\n_s(UsersPage, \"hsTnkAmKc0Y5tYTAPjmQgYvn9jU=\", false, function () {\n  return [useNavigate];\n});\n_c = UsersPage;\nexport default UsersPage;\n\n////working----------------------\n\n// import React, { useEffect, useState } from \"react\";\n// import { getUsers, deleteUser } from \"../services/api\";\n// import UserTable from \"../components/UserTable\";\n// import Pagination from \"../components/Pagination\";\n// import SearchBar from \"../components/SearchBar\";\n// import FilterPopup from \"../components/FilterPopup\";\n// import { useNavigate } from \"react-router-dom\";\n// import { Container, Row, Col, Button } from \"react-bootstrap\";\n\n// const UsersPage = () => {\n//   const [users, setUsers] = useState([]);\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [filters, setFilters] = useState({});\n//   const [sortField, setSortField] = useState(\"\");\n//   const [sortOrder, setSortOrder] = useState(\"asc\");\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [pageLimit, setPageLimit] = useState(10);\n//   const navigate = useNavigate();\n\n//   useEffect(() => { fetchUsers(); }, []);\n\n//   const fetchUsers = async () => {\n//     try {\n//       const data = await getUsers();\n//       const withDept = data.map((user, index) => ({\n//         ...user,\n//         department: [\"IT\", \"HR\", \"Finance\", \"Marketing\"][index % 4],\n//       }));\n//       setUsers(withDept);\n//     } catch (error) { alert(\"Failed to fetch users\"); }\n//   };\n\n//   const handleDelete = async (id) => {\n//     if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\n//     try {\n//       await deleteUser(id);\n//       setUsers(users.filter((u) => u.id !== id));\n//     } catch { alert(\"Failed to delete user\"); }\n//   };\n\n//   const handleSearch = (query) => { setSearchQuery(query); setCurrentPage(1); };\n//   const handleFilterChange = (newFilters) => { setFilters(newFilters); setCurrentPage(1); };\n//   const handleSort = (field) => {\n//     if (sortField === field) setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n//     else { setSortField(field); setSortOrder(\"asc\"); }\n//   };\n\n//   const filteredUsers = users.filter((user) => {\n//     const [firstName, lastName] = user.name.split(\" \");\n//     const matchSearch =\n//       !searchQuery ||\n//       user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n//       user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n//       user.department.toLowerCase().includes(searchQuery.toLowerCase());\n//     const matchFirst = !filters.firstName || firstName?.toLowerCase().includes(filters.firstName.toLowerCase());\n//     const matchLast = !filters.lastName || lastName?.toLowerCase().includes(filters.lastName.toLowerCase());\n//     const matchEmail = !filters.email || user.email.toLowerCase().includes(filters.email.toLowerCase());\n//     const matchDept = !filters.department || user.department.toLowerCase() === filters.department.toLowerCase();\n//     return matchSearch && matchFirst && matchLast && matchEmail && matchDept;\n//   });\n\n//   const sortedUsers = [...filteredUsers].sort((a, b) => {\n//     if (!sortField) return 0;\n//     let valA = a[sortField], valB = b[sortField];\n//     if (sortField === \"firstName\") { valA = a.name.split(\" \")[0]; valB = b.name.split(\" \")[0]; }\n//     if (sortField === \"lastName\") { valA = a.name.split(\" \")[1] || \"\"; valB = b.name.split(\" \")[1] || \"\"; }\n//     if (typeof valA === \"string\") valA = valA.toLowerCase();\n//     if (typeof valB === \"string\") valB = valB.toLowerCase();\n//     if (valA < valB) return sortOrder === \"asc\" ? -1 : 1;\n//     if (valA > valB) return sortOrder === \"asc\" ? 1 : -1;\n//     return 0;\n//   });\n\n//   const startIndex = (currentPage - 1) * pageLimit;\n//   const paginatedUsers = sortedUsers.slice(startIndex, startIndex + pageLimit);\n\n//   return (\n//     <Container className=\"my-4\">\n//       <h2 className=\"text-center mb-4\">User Management Dashboard</h2>\n//       <Row className=\"mb-3 align-items-center\">\n//         <Col md={4}><SearchBar onSearch={handleSearch} /></Col>\n//         <Col md={4}><FilterPopup onFilterChange={handleFilterChange} /></Col>\n//         <Col md={4} className=\"text-md-end mt-2 mt-md-0\">\n//           <Button onClick={() => navigate(\"/add\")}>+ Add User</Button>\n//         </Col>\n//       </Row>\n//       <UserTable\n//         users={paginatedUsers}\n//         onDelete={handleDelete}\n//         onSort={handleSort}\n//         sortField={sortField}\n//         sortOrder={sortOrder}\n//       />\n//       <Pagination\n//         currentPage={currentPage}\n//         totalItems={sortedUsers.length}\n//         pageLimit={pageLimit}\n//         onPageChange={setCurrentPage}\n//         onLimitChange={setPageLimit}\n//       />\n//     </Container>\n//   );\n// };\n\n// export default UsersPage;\n\n// import React, { useEffect, useState } from \"react\";\n// import { getUsers, deleteUser } from \"../services/api\";\n// import UserTable from \"../components/UserTable\";\n// import Pagination from \"../components/Pagination\";\n// import SearchBar from \"../components/SearchBar\";\n// import FilterPopup from \"../components/FilterPopup\";\n// import { useNavigate, useLocation } from \"react-router-dom\";\n// import { Container, Row, Col, Button } from \"react-bootstrap\";\n\n// const UsersPage = () => {\n//   const [users, setUsers] = useState([]);\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [filters, setFilters] = useState({});\n//   const [sortField, setSortField] = useState(\"\");\n//   const [sortOrder, setSortOrder] = useState(\"asc\");\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [pageLimit, setPageLimit] = useState(10);\n//   const navigate = useNavigate();\n//   const location = useLocation();\n\n//   useEffect(() => { fetchUsers(); }, [location]);\n\n//   const fetchUsers = async () => {\n//     try {\n//       const data = await getUsers();\n//       const withDept = data.map((user, index) => ({\n//         ...user,\n//         department: [\"IT\", \"HR\", \"Finance\", \"Marketing\"][index % 4],\n//       }));\n//       setUsers(withDept);\n//     } catch (error) { alert(\"Failed to fetch users\"); }\n//   };\n\n//   const handleDelete = async (id) => {\n//     if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\n//     try {\n//       await deleteUser(id);\n//       setUsers(users.filter((u) => u.id !== id));\n//     } catch { alert(\"Failed to delete user\"); }\n//   };\n\n//   const handleSearch = (query) => { setSearchQuery(query); setCurrentPage(1); };\n//   const handleFilterChange = (newFilters) => { setFilters(newFilters); setCurrentPage(1); };\n//   const handleSort = (field) => {\n//     if (sortField === field) setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n//     else { setSortField(field); setSortOrder(\"asc\"); }\n//   };\n\n//   // Filtering & Sorting & Pagination logic (same as previous version)...\n//   const filteredUsers = users.filter((user) => {\n//     const [firstName, lastName] = user.name.split(\" \");\n//     const matchSearch =\n//       !searchQuery ||\n//       user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n//       user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n//       user.department.toLowerCase().includes(searchQuery.toLowerCase());\n//     const matchFirst = !filters.firstName || firstName?.toLowerCase().includes(filters.firstName.toLowerCase());\n//     const matchLast = !filters.lastName || lastName?.toLowerCase().includes(filters.lastName.toLowerCase());\n//     const matchEmail = !filters.email || user.email.toLowerCase().includes(filters.email.toLowerCase());\n//     const matchDept = !filters.department || user.department.toLowerCase() === filters.department.toLowerCase();\n//     return matchSearch && matchFirst && matchLast && matchEmail && matchDept;\n//   });\n\n//   const sortedUsers = [...filteredUsers].sort((a, b) => {\n//     if (!sortField) return 0;\n//     let valA = a[sortField], valB = b[sortField];\n//     if (sortField === \"firstName\") { valA = a.name.split(\" \")[0]; valB = b.name.split(\" \")[0]; }\n//     if (sortField === \"lastName\") { valA = a.name.split(\" \")[1] || \"\"; valB = b.name.split(\" \")[1] || \"\"; }\n//     if (typeof valA === \"string\") valA = valA.toLowerCase();\n//     if (typeof valB === \"string\") valB = valB.toLowerCase();\n//     if (valA < valB) return sortOrder === \"asc\" ? -1 : 1;\n//     if (valA > valB) return sortOrder === \"asc\" ? 1 : -1;\n//     return 0;\n//   });\n\n//   const startIndex = (currentPage - 1) * pageLimit;\n//   const paginatedUsers = sortedUsers.slice(startIndex, startIndex + pageLimit);\n\n//   return (\n//     <Container className=\"my-4\">\n//       <h2 className=\"text-center mb-4\">User Management Dashboard</h2>\n\n//       <Row className=\"mb-3 align-items-center\">\n//         <Col md={4}><SearchBar onSearch={handleSearch} /></Col>\n//         <Col md={4}><FilterPopup onFilterChange={handleFilterChange} /></Col>\n//         <Col md={4} className=\"text-md-end mt-2 mt-md-0\">\n//           <Button onClick={() => navigate(\"/add\")}>+ Add User</Button>\n//         </Col>\n//       </Row>\n\n//       <UserTable users={paginatedUsers} onDelete={handleDelete} onSort={handleSort} />\n\n//       <Pagination\n//         currentPage={currentPage}\n//         totalItems={sortedUsers.length}\n//         pageLimit={pageLimit}\n//         onPageChange={setCurrentPage}\n//         onLimitChange={setPageLimit}\n//       />\n//     </Container>\n//   );\n// };\n\n// export default UsersPage;\n\n//=======================\n\n// import React, { useEffect, useState } from \"react\";\n// import { getUsers, deleteUser } from \"../services/api\";\n// import UserTable from \"../components/UserTable\";\n// import Pagination from \"../components/Pagination\";\n// import SearchBar from \"../components/SearchBar\";\n// import FilterPopup from \"../components/FilterPopup\";\n// import { useNavigate, useLocation } from \"react-router-dom\";\n\n// const UsersPage = () => {\n//   const [users, setUsers] = useState([]);\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [filters, setFilters] = useState({});\n//   const [sortField, setSortField] = useState(\"\");\n//   const [sortOrder, setSortOrder] = useState(\"asc\");\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [pageLimit, setPageLimit] = useState(10);\n//   const navigate = useNavigate();\n//   const location = useLocation(); // track route changes\n\n//   // Fetch users whenever location changes (e.g., after add/edit)\n//   useEffect(() => {\n//     fetchUsers();\n//   }, [location]);\n\n//   const fetchUsers = async () => {\n//     try {\n//       const data = await getUsers();\n//       const withDept = data.map((user, index) => ({\n//         ...user,\n//         department: [\"IT\", \"HR\", \"Finance\", \"Marketing\"][index % 4],\n//       }));\n//       setUsers(withDept);\n//     } catch (error) {\n//       alert(\"Failed to fetch users\");\n//     }\n//   };\n\n//   const handleDelete = async (id) => {\n//     if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\n//     try {\n//       await deleteUser(id);\n//       setUsers(users.filter((u) => u.id !== id));\n//     } catch (error) {\n//       alert(\"Failed to delete user\");\n//     }\n//   };\n\n//   const handleSearch = (query) => {\n//     setSearchQuery(query);\n//     setCurrentPage(1);\n//   };\n\n//   const handleFilterChange = (newFilters) => {\n//     setFilters(newFilters);\n//     setCurrentPage(1);\n//   };\n\n//   const handleSort = (field) => {\n//     if (sortField === field) {\n//       setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n//     } else {\n//       setSortField(field);\n//       setSortOrder(\"asc\");\n//     }\n//   };\n\n//   // Filtering\n//   const filteredUsers = users.filter((user) => {\n//     const [firstName, lastName] = user.name.split(\" \");\n//     const matchSearch =\n//       !searchQuery ||\n//       user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n//       user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n//       user.department.toLowerCase().includes(searchQuery.toLowerCase());\n\n//     const matchFirst =\n//       !filters.firstName ||\n//       firstName?.toLowerCase().includes(filters.firstName.toLowerCase());\n//     const matchLast =\n//       !filters.lastName ||\n//       lastName?.toLowerCase().includes(filters.lastName.toLowerCase());\n//     const matchEmail =\n//       !filters.email || user.email.toLowerCase().includes(filters.email.toLowerCase());\n//     const matchDept =\n//       !filters.department || user.department.toLowerCase() === filters.department.toLowerCase();\n\n//     return matchSearch && matchFirst && matchLast && matchEmail && matchDept;\n//   });\n\n//   // Sorting\n//   const sortedUsers = [...filteredUsers].sort((a, b) => {\n//     if (!sortField) return 0;\n//     let valA, valB;\n//     switch (sortField) {\n//       case \"firstName\":\n//         valA = a.name.split(\" \")[0];\n//         valB = b.name.split(\" \")[0];\n//         break;\n//       case \"lastName\":\n//         valA = a.name.split(\" \")[1] || \"\";\n//         valB = b.name.split(\" \")[1] || \"\";\n//         break;\n//       default:\n//         valA = a[sortField];\n//         valB = b[sortField];\n//     }\n//     if (typeof valA === \"string\") valA = valA.toLowerCase();\n//     if (typeof valB === \"string\") valB = valB.toLowerCase();\n\n//     if (valA < valB) return sortOrder === \"asc\" ? -1 : 1;\n//     if (valA > valB) return sortOrder === \"asc\" ? 1 : -1;\n//     return 0;\n//   });\n\n//   // Pagination\n//   const startIndex = (currentPage - 1) * pageLimit;\n//   const paginatedUsers = sortedUsers.slice(startIndex, startIndex + pageLimit);\n\n//   return (\n//     <div style={{ padding: \"20px\", maxWidth: \"1200px\", margin: \"auto\" }}>\n//       <h2 style={{ textAlign: \"center\" }}>User Management Dashboard</h2>\n\n//       <div\n//         style={{\n//           display: \"flex\",\n//           justifyContent: \"space-between\",\n//           margin: \"20px 0\",\n//           flexWrap: \"wrap\",\n//           gap: \"10px\",\n//         }}\n//       >\n//         <SearchBar onSearch={handleSearch} />\n//         <FilterPopup onFilterChange={handleFilterChange} />\n//         <button onClick={() => navigate(\"/add\")}>+ Add User</button>\n//       </div>\n\n//       <UserTable users={paginatedUsers} onDelete={handleDelete} onSort={handleSort} />\n\n//       <Pagination\n//         currentPage={currentPage}\n//         totalItems={sortedUsers.length}\n//         pageLimit={pageLimit}\n//         onPageChange={setCurrentPage}\n//         onLimitChange={setPageLimit}\n//       />\n//     </div>\n//   );\n// };\n\n// export default UsersPage;\n\n//ok-----------------------------------------------------------------------\n\n// import React, { useEffect, useState } from \"react\";\n// import { getUsers, deleteUser } from \"../services/api\";\n// import UserTable from \"../components/UserTable\";\n// import Pagination from \"../components/Pagination\";\n// import SearchBar from \"../components/SearchBar\";\n// import FilterPopup from \"../components/FilterPopup\";\n// import { useNavigate } from \"react-router-dom\";\n\n// const UsersPage = () => {\n//   const [users, setUsers] = useState([]);\n//   const [searchQuery, setSearchQuery] = useState(\"\");\n//   const [filters, setFilters] = useState({});\n//   const [sortField, setSortField] = useState(\"\");\n//   const [sortOrder, setSortOrder] = useState(\"asc\");\n//   const [currentPage, setCurrentPage] = useState(1);\n//   const [pageLimit, setPageLimit] = useState(10);\n//   const navigate = useNavigate();\n\n//   useEffect(() => {\n//     fetchUsers();\n//   }, []);\n\n//   const fetchUsers = async () => {\n//     try {\n//       const data = await getUsers();\n//       const withDept = data.map((user, index) => ({\n//         ...user,\n//         department: [\"IT\", \"HR\", \"Finance\", \"Marketing\"][index % 4],\n//       }));\n//       setUsers(withDept);\n//     } catch (error) {\n//       alert(\"Failed to fetch users\");\n//     }\n//   };\n\n//   const handleDelete = async (id) => {\n//     if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\n//     try {\n//       await deleteUser(id);\n//       setUsers(users.filter((u) => u.id !== id));\n//     } catch (error) {\n//       alert(\"Failed to delete user\");\n//     }\n//   };\n\n//   const handleSearch = (query) => {\n//     setSearchQuery(query);\n//     setCurrentPage(1);\n//   };\n\n//   const handleFilterChange = (newFilters) => {\n//     setFilters(newFilters);\n//     setCurrentPage(1);\n//   };\n\n//   const handleSort = (field) => {\n//     if (sortField === field) {\n//       setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\n//     } else {\n//       setSortField(field);\n//       setSortOrder(\"asc\");\n//     }\n//   };\n\n//   const filteredUsers = users.filter((user) => {\n//     const [firstName, lastName] = user.name.split(\" \");\n//     const matchSearch =\n//       !searchQuery ||\n//       user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\n//       user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\n//       user.department.toLowerCase().includes(searchQuery.toLowerCase());\n\n//     const matchFirst =\n//       !filters.firstName ||\n//       firstName?.toLowerCase().includes(filters.firstName.toLowerCase());\n//     const matchLast =\n//       !filters.lastName ||\n//       lastName?.toLowerCase().includes(filters.lastName.toLowerCase());\n//     const matchEmail =\n//       !filters.email ||\n//       user.email.toLowerCase().includes(filters.email.toLowerCase());\n//     const matchDept =\n//       !filters.department ||\n//       user.department.toLowerCase() === filters.department.toLowerCase();\n\n//     return matchSearch && matchFirst && matchLast && matchEmail && matchDept;\n//   });\n\n//   const sortedUsers = [...filteredUsers].sort((a, b) => {\n//     if (!sortField) return 0;\n//     let valA, valB;\n//     switch (sortField) {\n//       case \"firstName\":\n//         valA = a.name.split(\" \")[0];\n//         valB = b.name.split(\" \")[0];\n//         break;\n//       case \"lastName\":\n//         valA = a.name.split(\" \")[1] || \"\";\n//         valB = b.name.split(\" \")[1] || \"\";\n//         break;\n//       default:\n//         valA = a[sortField];\n//         valB = b[sortField];\n//     }\n//     if (typeof valA === \"string\") valA = valA.toLowerCase();\n//     if (typeof valB === \"string\") valB = valB.toLowerCase();\n\n//     if (valA < valB) return sortOrder === \"asc\" ? -1 : 1;\n//     if (valA > valB) return sortOrder === \"asc\" ? 1 : -1;\n//     return 0;\n//   });\n\n//   const startIndex = (currentPage - 1) * pageLimit;\n//   const paginatedUsers = sortedUsers.slice(startIndex, startIndex + pageLimit);\n\n//   return (\n//     <div style={{ padding: \"20px\", maxWidth: \"1200px\", margin: \"auto\" }}>\n//       <h2 style={{ textAlign: \"center\" }}>User Management Dashboard</h2>\n\n//       <div style={{ display: \"flex\", justifyContent: \"space-between\", margin: \"20px 0\", flexWrap: \"wrap\", gap: \"10px\" }}>\n//         <SearchBar onSearch={handleSearch} />\n//         <FilterPopup onFilterChange={handleFilterChange} />\n//         <button onClick={() => navigate(\"/add\")}>+ Add User</button>\n//       </div>\n\n//       <UserTable users={paginatedUsers} onDelete={handleDelete} onSort={handleSort} />\n\n//       <Pagination\n//         currentPage={currentPage}\n//         totalItems={sortedUsers.length}\n//         pageLimit={pageLimit}\n//         onPageChange={setCurrentPage}\n//         onLimitChange={setPageLimit}\n//       />\n//     </div>\n//   );\n// };\n\n// export default UsersPage;\n\n//==================================================================\n//\n\n// import React, { useEffect, useState, useMemo } from \"react\";\n// import { getUsers, deleteUser } from \"../services/api\";\n// import UserTable from \"../components/UserTable\";\n// import SearchBar from \"../components/SearchBar\";\n// import Pagination from \"../components/Pagination\";\n// import FilterPopup from \"../components/FilterPopup\";\n\n// /**\n//  * Utility: map JSONPlaceholder user to our model\n//  */\n// function mapUser(u) {\n//   const nameParts = (u.name || \"\").split(\" \");\n//   const firstName = nameParts[0] || \"\";\n//   const lastName = nameParts.slice(1).join(\" \") || \"\";\n//   const department = (u.company && u.company.name) ? u.company.name : \"General\";\n//   return {\n//     id: u.id,\n//     firstName,\n//     lastName,\n//     email: u.email || \"\",\n//     department,\n//     // keep original raw for edits if needed\n//     raw: u,\n//   };\n// }\n\n// export default function UsersPage() {\n//   const [rawUsers, setRawUsers] = useState([]);\n//   const [loading, setLoading] = useState(false);\n//   const [error, setError] = useState(null);\n\n//   // UI states\n//   const [search, setSearch] = useState(\"\");\n//   const [filters, setFilters] = useState({ firstName: \"\", lastName: \"\", email: \"\", department: \"\" });\n//   const [filterPopupOpen, setFilterPopupOpen] = useState(false);\n//   const [pageSize, setPageSize] = useState(10);\n//   const [page, setPage] = useState(1);\n//   const [sortConfig, setSortConfig] = useState({ key: \"id\", direction: \"asc\" });\n\n//   useEffect(() => {\n//     fetchUsers();\n//   }, []);\n\n//   // Fetch users from API\n//   async function fetchUsers() {\n//     setLoading(true);\n//     setError(null);\n//     try {\n//       const data = await getUsers();\n//       // map to our simpler model\n//       setRawUsers(data.map(mapUser));\n//     } catch (err) {\n//       console.error(err);\n//       setError(err.message || \"Error fetching users\");\n//     } finally {\n//       setLoading(false);\n//     }\n//   }\n\n//   // Delete user handler\n//   async function handleDelete(id) {\n//     try {\n//       await deleteUser(id); // simulated\n//       // remove locally to reflect UI changes\n//       setRawUsers((prev) => prev.filter((u) => u.id !== id));\n//       alert(\"User deleted (simulated)\"); // simple notification\n//     } catch (err) {\n//       alert(\"Failed to delete user: \" + err.message);\n//     }\n//   }\n\n//   // Sort handler (toggle)\n//   function handleSort(key) {\n//     setSortConfig((prev) => {\n//       if (prev.key === key) {\n//         return { key, direction: prev.direction === \"asc\" ? \"desc\" : \"asc\" };\n//       } else {\n//         return { key, direction: \"asc\" };\n//       }\n//     });\n//   }\n\n//   // Apply filters + search + sort\n//   const processed = useMemo(() => {\n//     // start with rawUsers\n//     let items = [...rawUsers];\n\n//     // filter popup fields (exact/contains)\n//     if (filters.firstName) {\n//       items = items.filter((u) => u.firstName.toLowerCase().includes(filters.firstName.toLowerCase()));\n//     }\n//     if (filters.lastName) {\n//       items = items.filter((u) => u.lastName.toLowerCase().includes(filters.lastName.toLowerCase()));\n//     }\n//     if (filters.email) {\n//       items = items.filter((u) => u.email.toLowerCase().includes(filters.email.toLowerCase()));\n//     }\n//     if (filters.department) {\n//       items = items.filter((u) => u.department.toLowerCase().includes(filters.department.toLowerCase()));\n//     }\n\n//     // global search across fields\n//     if (search && search.trim() !== \"\") {\n//       const q = search.toLowerCase();\n//       items = items.filter((u) =>\n//         u.firstName.toLowerCase().includes(q) ||\n//         u.lastName.toLowerCase().includes(q) ||\n//         u.email.toLowerCase().includes(q) ||\n//         u.department.toLowerCase().includes(q)\n//       );\n//     }\n\n//     // sort\n//     const { key, direction } = sortConfig || {};\n//     if (key) {\n//       items.sort((a, b) => {\n//         const va = (a[key] || \"\").toString().toLowerCase();\n//         const vb = (b[key] || \"\").toString().toLowerCase();\n//         if (va < vb) return direction === \"asc\" ? -1 : 1;\n//         if (va > vb) return direction === \"asc\" ? 1 : -1;\n//         return 0;\n//       });\n//     }\n\n//     return items;\n//   }, [rawUsers, search, filters, sortConfig]);\n\n//   // pagination calculations\n//   const totalItems = processed.length;\n//   const totalPages = Math.max(1, Math.ceil(totalItems / pageSize));\n//   // adjust page if current page out of range\n//   useEffect(() => {\n//     if (page > totalPages) setPage(totalPages);\n//   }, [totalPages, page]);\n\n//   const currentData = processed.slice((page - 1) * pageSize, page * pageSize);\n\n//   return (\n//     <div>\n//       <div className=\"d-flex flex-column flex-md-row align-items-start gap-3 justify-content-between mb-3\">\n//         <div style={{ flex: 1, minWidth: 280 }}>\n//           <SearchBar value={search} onChange={(v) => { setSearch(v); setPage(1); }} />\n//         </div>\n\n//         <div className=\"d-flex gap-2 align-items-center\">\n//           <div>\n//             <select className=\"form-select\" value={pageSize} onChange={(e) => { setPageSize(Number(e.target.value)); setPage(1); }}>\n//               {[10, 25, 50, 100].map((n) => <option key={n} value={n}>{n} / page</option>)}\n//             </select>\n//           </div>\n\n//           <button className=\"btn btn-outline-secondary\" onClick={() => setFilterPopupOpen(true)}>Filter</button>\n//           <button className=\"btn btn-outline-success\" onClick={fetchUsers}>Refresh</button>\n//         </div>\n//       </div>\n\n//       {loading && <div className=\"alert alert-info\">Loading users...</div>}\n//       {error && <div className=\"alert alert-danger\">{error}</div>}\n\n//       <UserTable users={currentData} onDelete={handleDelete} onSort={handleSort} sortConfig={sortConfig} />\n\n//       <div className=\"d-flex justify-content-between align-items-center\">\n//         <div><small>Showing {(page - 1) * pageSize + 1} - {Math.min(totalItems, page * pageSize)} of {totalItems} users</small></div>\n//         <Pagination currentPage={page} totalPages={totalPages} onPageChange={(p) => setPage(p)} />\n//       </div>\n\n//       <FilterPopup visible={filterPopupOpen} onClose={() => setFilterPopupOpen(false)} onApply={(f) => { setFilters(f); setPage(1); }} initialFilters={filters} />\n//     </div>\n//   );\n// }\nvar _c;\n$RefreshReg$(_c, \"UsersPage\");","map":{"version":3,"names":["React","useEffect","useState","getUsers","deleteUser","UserTable","Pagination","SearchBar","FilterPopup","Button","Toast","ToastContainer","useNavigate","jsxDEV","_jsxDEV","UsersPage","_s","users","setUsers","filteredUsers","setFilteredUsers","currentPage","setCurrentPage","pageLimit","setPageLimit","searchQuery","setSearchQuery","showFilter","setShowFilter","toastMsg","setToastMsg","sortField","setSortField","sortOrder","setSortOrder","navigate","fetchUsers","data","deptData","map","u","department","id","error","showToast","msg","setTimeout","handleDelete","window","confirm","newList","filter","handleFilter","filterData","filtered","firstName","lastName","name","split","email","toLowerCase","includes","handleSort","field","order","sorted","sort","a","b","valA","valB","toString","handleSearch","query","paginatedUsers","slice","children","className","variant","onClick","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","e","Number","target","n","onDelete","onSort","total","length","limit","show","handleClose","applyFilter","position","onClose","delay","autohide","_c","$RefreshReg$"],"sources":["C:/Users/dmayu/OneDrive/Desktop/kanishka/project/extra/user_Dashboard/user_dashboard/src/pages/UsersPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { getUsers, deleteUser } from \"../services/api\";\r\nimport UserTable from \"../components/UserTable\";\r\nimport Pagination from \"../components/Pagination\";\r\nimport SearchBar from \"../components/SearchBar\";\r\nimport FilterPopup from \"../components/FilterPopup\";\r\nimport { Button, Toast, ToastContainer } from \"react-bootstrap\";\r\nimport { useNavigate } from \"react-router-dom\";\r\n\r\nconst UsersPage = () => {\r\n  const [users, setUsers] = useState([]);\r\n  const [filteredUsers, setFilteredUsers] = useState([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageLimit, setPageLimit] = useState(10);\r\n  const [searchQuery, setSearchQuery] = useState(\"\");\r\n  const [showFilter, setShowFilter] = useState(false);\r\n  const [toastMsg, setToastMsg] = useState(\"\");\r\n  const [sortField, setSortField] = useState(\"id\");\r\n  const [sortOrder, setSortOrder] = useState(\"asc\");\r\n  const navigate = useNavigate();\r\n\r\n  useEffect(() => {\r\n    fetchUsers();\r\n  }, []);\r\n\r\n  const fetchUsers = async () => {\r\n    try {\r\n      const data = await getUsers();\r\n      const deptData = data.map((u) => ({ ...u, department: [\"IT\", \"HR\", \"Sales\"][u.id % 3] }));\r\n      setUsers(deptData);\r\n      setFilteredUsers(deptData);\r\n    } catch (error) {\r\n      showToast(\"Error fetching users\");\r\n    }\r\n  };\r\n\r\n  const showToast = (msg) => {\r\n    setToastMsg(msg);\r\n    setTimeout(() => setToastMsg(\"\"), 3000);\r\n  };\r\n\r\n  const handleDelete = async (id) => {\r\n    if (window.confirm(\"Are you sure to delete?\")) {\r\n      try {\r\n        await deleteUser(id);\r\n        const newList = users.filter((u) => u.id !== id);\r\n        setUsers(newList);\r\n        setFilteredUsers(newList);\r\n        showToast(\"User deleted successfully\");\r\n      } catch {\r\n        showToast(\"Error deleting user\");\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleFilter = (filterData) => {\r\n    let filtered = users.filter((u) => {\r\n      const [firstName, lastName] = u.name.split(\" \");\r\n      return (\r\n        u.email.toLowerCase().includes(filterData.email.toLowerCase()) &&\r\n        u.department.toLowerCase().includes(filterData.department.toLowerCase()) &&\r\n        firstName.toLowerCase().includes(filterData.firstName.toLowerCase()) &&\r\n        (lastName || \"\").toLowerCase().includes(filterData.lastName.toLowerCase())\r\n      );\r\n    });\r\n    setFilteredUsers(filtered);\r\n  };\r\n\r\n  const handleSort = (field) => {\r\n    const order = sortField === field && sortOrder === \"asc\" ? \"desc\" : \"asc\";\r\n    const sorted = [...filteredUsers].sort((a, b) => {\r\n      let valA, valB;\r\n      if (field === \"firstName\") {\r\n        valA = a.name.split(\" \")[0].toLowerCase();\r\n        valB = b.name.split(\" \")[0].toLowerCase();\r\n      } else if (field === \"lastName\") {\r\n        valA = (a.name.split(\" \")[1] || \"\").toLowerCase();\r\n        valB = (b.name.split(\" \")[1] || \"\").toLowerCase();\r\n      } else {\r\n        valA = (a[field] || \"\").toString().toLowerCase();\r\n        valB = (b[field] || \"\").toString().toLowerCase();\r\n      }\r\n      if (valA < valB) return order === \"asc\" ? -1 : 1;\r\n      if (valA > valB) return order === \"asc\" ? 1 : -1;\r\n      return 0;\r\n    });\r\n    setSortField(field);\r\n    setSortOrder(order);\r\n    setFilteredUsers(sorted);\r\n  };\r\n\r\n  const handleSearch = (query) => {\r\n    setSearchQuery(query);\r\n    const filtered = users.filter((u) => {\r\n      const [firstName, lastName] = u.name.split(\" \");\r\n      return (\r\n        firstName.toLowerCase().includes(query.toLowerCase()) ||\r\n        (lastName || \"\").toLowerCase().includes(query.toLowerCase()) ||\r\n        u.email.toLowerCase().includes(query.toLowerCase()) ||\r\n        u.department.toLowerCase().includes(query.toLowerCase())\r\n      );\r\n    });\r\n    setFilteredUsers(filtered);\r\n  };\r\n\r\n  const paginatedUsers = filteredUsers.slice((currentPage - 1) * pageLimit, currentPage * pageLimit);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"d-flex justify-content-between mb-2\">\r\n        <Button variant=\"success\" onClick={() => navigate(\"/add\")}>\r\n          Add User\r\n        </Button>\r\n        <div>\r\n          <Button variant=\"info\" onClick={() => setShowFilter(true)} className=\"me-2\">\r\n            Filter\r\n          </Button>\r\n          <select value={pageLimit} onChange={(e) => setPageLimit(Number(e.target.value))} className=\"form-select d-inline-block w-auto\">\r\n            {[10, 25, 50, 100].map((n) => (\r\n              <option key={n} value={n}>\r\n                {n}\r\n              </option>\r\n            ))}\r\n          </select>\r\n        </div>\r\n      </div>\r\n      <SearchBar searchQuery={searchQuery} setSearchQuery={handleSearch} />\r\n      <UserTable users={paginatedUsers} onDelete={handleDelete} onSort={handleSort} sortField={sortField} sortOrder={sortOrder} />\r\n      <Pagination total={filteredUsers.length} limit={pageLimit} currentPage={currentPage} setCurrentPage={setCurrentPage} />\r\n      <FilterPopup show={showFilter} handleClose={() => setShowFilter(false)} applyFilter={handleFilter} />\r\n      <ToastContainer position=\"top-end\" className=\"p-3\">\r\n        {toastMsg && <Toast onClose={() => setToastMsg(\"\")} show={!!toastMsg} delay={2000} autohide>{toastMsg}</Toast>}\r\n      </ToastContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UsersPage;\r\n\r\n\r\n\r\n////working----------------------\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { getUsers, deleteUser } from \"../services/api\";\r\n// import UserTable from \"../components/UserTable\";\r\n// import Pagination from \"../components/Pagination\";\r\n// import SearchBar from \"../components/SearchBar\";\r\n// import FilterPopup from \"../components/FilterPopup\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n// import { Container, Row, Col, Button } from \"react-bootstrap\";\r\n\r\n// const UsersPage = () => {\r\n//   const [users, setUsers] = useState([]);\r\n//   const [searchQuery, setSearchQuery] = useState(\"\");\r\n//   const [filters, setFilters] = useState({});\r\n//   const [sortField, setSortField] = useState(\"\");\r\n//   const [sortOrder, setSortOrder] = useState(\"asc\");\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const [pageLimit, setPageLimit] = useState(10);\r\n//   const navigate = useNavigate();\r\n\r\n//   useEffect(() => { fetchUsers(); }, []);\r\n\r\n//   const fetchUsers = async () => {\r\n//     try {\r\n//       const data = await getUsers();\r\n//       const withDept = data.map((user, index) => ({\r\n//         ...user,\r\n//         department: [\"IT\", \"HR\", \"Finance\", \"Marketing\"][index % 4],\r\n//       }));\r\n//       setUsers(withDept);\r\n//     } catch (error) { alert(\"Failed to fetch users\"); }\r\n//   };\r\n\r\n//   const handleDelete = async (id) => {\r\n//     if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\r\n//     try {\r\n//       await deleteUser(id);\r\n//       setUsers(users.filter((u) => u.id !== id));\r\n//     } catch { alert(\"Failed to delete user\"); }\r\n//   };\r\n\r\n//   const handleSearch = (query) => { setSearchQuery(query); setCurrentPage(1); };\r\n//   const handleFilterChange = (newFilters) => { setFilters(newFilters); setCurrentPage(1); };\r\n//   const handleSort = (field) => {\r\n//     if (sortField === field) setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\r\n//     else { setSortField(field); setSortOrder(\"asc\"); }\r\n//   };\r\n\r\n//   const filteredUsers = users.filter((user) => {\r\n//     const [firstName, lastName] = user.name.split(\" \");\r\n//     const matchSearch =\r\n//       !searchQuery ||\r\n//       user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n//       user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n//       user.department.toLowerCase().includes(searchQuery.toLowerCase());\r\n//     const matchFirst = !filters.firstName || firstName?.toLowerCase().includes(filters.firstName.toLowerCase());\r\n//     const matchLast = !filters.lastName || lastName?.toLowerCase().includes(filters.lastName.toLowerCase());\r\n//     const matchEmail = !filters.email || user.email.toLowerCase().includes(filters.email.toLowerCase());\r\n//     const matchDept = !filters.department || user.department.toLowerCase() === filters.department.toLowerCase();\r\n//     return matchSearch && matchFirst && matchLast && matchEmail && matchDept;\r\n//   });\r\n\r\n//   const sortedUsers = [...filteredUsers].sort((a, b) => {\r\n//     if (!sortField) return 0;\r\n//     let valA = a[sortField], valB = b[sortField];\r\n//     if (sortField === \"firstName\") { valA = a.name.split(\" \")[0]; valB = b.name.split(\" \")[0]; }\r\n//     if (sortField === \"lastName\") { valA = a.name.split(\" \")[1] || \"\"; valB = b.name.split(\" \")[1] || \"\"; }\r\n//     if (typeof valA === \"string\") valA = valA.toLowerCase();\r\n//     if (typeof valB === \"string\") valB = valB.toLowerCase();\r\n//     if (valA < valB) return sortOrder === \"asc\" ? -1 : 1;\r\n//     if (valA > valB) return sortOrder === \"asc\" ? 1 : -1;\r\n//     return 0;\r\n//   });\r\n\r\n//   const startIndex = (currentPage - 1) * pageLimit;\r\n//   const paginatedUsers = sortedUsers.slice(startIndex, startIndex + pageLimit);\r\n\r\n//   return (\r\n//     <Container className=\"my-4\">\r\n//       <h2 className=\"text-center mb-4\">User Management Dashboard</h2>\r\n//       <Row className=\"mb-3 align-items-center\">\r\n//         <Col md={4}><SearchBar onSearch={handleSearch} /></Col>\r\n//         <Col md={4}><FilterPopup onFilterChange={handleFilterChange} /></Col>\r\n//         <Col md={4} className=\"text-md-end mt-2 mt-md-0\">\r\n//           <Button onClick={() => navigate(\"/add\")}>+ Add User</Button>\r\n//         </Col>\r\n//       </Row>\r\n//       <UserTable\r\n//         users={paginatedUsers}\r\n//         onDelete={handleDelete}\r\n//         onSort={handleSort}\r\n//         sortField={sortField}\r\n//         sortOrder={sortOrder}\r\n//       />\r\n//       <Pagination\r\n//         currentPage={currentPage}\r\n//         totalItems={sortedUsers.length}\r\n//         pageLimit={pageLimit}\r\n//         onPageChange={setCurrentPage}\r\n//         onLimitChange={setPageLimit}\r\n//       />\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default UsersPage;\r\n\r\n\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { getUsers, deleteUser } from \"../services/api\";\r\n// import UserTable from \"../components/UserTable\";\r\n// import Pagination from \"../components/Pagination\";\r\n// import SearchBar from \"../components/SearchBar\";\r\n// import FilterPopup from \"../components/FilterPopup\";\r\n// import { useNavigate, useLocation } from \"react-router-dom\";\r\n// import { Container, Row, Col, Button } from \"react-bootstrap\";\r\n\r\n// const UsersPage = () => {\r\n//   const [users, setUsers] = useState([]);\r\n//   const [searchQuery, setSearchQuery] = useState(\"\");\r\n//   const [filters, setFilters] = useState({});\r\n//   const [sortField, setSortField] = useState(\"\");\r\n//   const [sortOrder, setSortOrder] = useState(\"asc\");\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const [pageLimit, setPageLimit] = useState(10);\r\n//   const navigate = useNavigate();\r\n//   const location = useLocation();\r\n\r\n//   useEffect(() => { fetchUsers(); }, [location]);\r\n\r\n//   const fetchUsers = async () => {\r\n//     try {\r\n//       const data = await getUsers();\r\n//       const withDept = data.map((user, index) => ({\r\n//         ...user,\r\n//         department: [\"IT\", \"HR\", \"Finance\", \"Marketing\"][index % 4],\r\n//       }));\r\n//       setUsers(withDept);\r\n//     } catch (error) { alert(\"Failed to fetch users\"); }\r\n//   };\r\n\r\n//   const handleDelete = async (id) => {\r\n//     if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\r\n//     try {\r\n//       await deleteUser(id);\r\n//       setUsers(users.filter((u) => u.id !== id));\r\n//     } catch { alert(\"Failed to delete user\"); }\r\n//   };\r\n\r\n//   const handleSearch = (query) => { setSearchQuery(query); setCurrentPage(1); };\r\n//   const handleFilterChange = (newFilters) => { setFilters(newFilters); setCurrentPage(1); };\r\n//   const handleSort = (field) => {\r\n//     if (sortField === field) setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\r\n//     else { setSortField(field); setSortOrder(\"asc\"); }\r\n//   };\r\n\r\n//   // Filtering & Sorting & Pagination logic (same as previous version)...\r\n//   const filteredUsers = users.filter((user) => {\r\n//     const [firstName, lastName] = user.name.split(\" \");\r\n//     const matchSearch =\r\n//       !searchQuery ||\r\n//       user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n//       user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n//       user.department.toLowerCase().includes(searchQuery.toLowerCase());\r\n//     const matchFirst = !filters.firstName || firstName?.toLowerCase().includes(filters.firstName.toLowerCase());\r\n//     const matchLast = !filters.lastName || lastName?.toLowerCase().includes(filters.lastName.toLowerCase());\r\n//     const matchEmail = !filters.email || user.email.toLowerCase().includes(filters.email.toLowerCase());\r\n//     const matchDept = !filters.department || user.department.toLowerCase() === filters.department.toLowerCase();\r\n//     return matchSearch && matchFirst && matchLast && matchEmail && matchDept;\r\n//   });\r\n\r\n//   const sortedUsers = [...filteredUsers].sort((a, b) => {\r\n//     if (!sortField) return 0;\r\n//     let valA = a[sortField], valB = b[sortField];\r\n//     if (sortField === \"firstName\") { valA = a.name.split(\" \")[0]; valB = b.name.split(\" \")[0]; }\r\n//     if (sortField === \"lastName\") { valA = a.name.split(\" \")[1] || \"\"; valB = b.name.split(\" \")[1] || \"\"; }\r\n//     if (typeof valA === \"string\") valA = valA.toLowerCase();\r\n//     if (typeof valB === \"string\") valB = valB.toLowerCase();\r\n//     if (valA < valB) return sortOrder === \"asc\" ? -1 : 1;\r\n//     if (valA > valB) return sortOrder === \"asc\" ? 1 : -1;\r\n//     return 0;\r\n//   });\r\n\r\n//   const startIndex = (currentPage - 1) * pageLimit;\r\n//   const paginatedUsers = sortedUsers.slice(startIndex, startIndex + pageLimit);\r\n\r\n//   return (\r\n//     <Container className=\"my-4\">\r\n//       <h2 className=\"text-center mb-4\">User Management Dashboard</h2>\r\n\r\n//       <Row className=\"mb-3 align-items-center\">\r\n//         <Col md={4}><SearchBar onSearch={handleSearch} /></Col>\r\n//         <Col md={4}><FilterPopup onFilterChange={handleFilterChange} /></Col>\r\n//         <Col md={4} className=\"text-md-end mt-2 mt-md-0\">\r\n//           <Button onClick={() => navigate(\"/add\")}>+ Add User</Button>\r\n//         </Col>\r\n//       </Row>\r\n\r\n//       <UserTable users={paginatedUsers} onDelete={handleDelete} onSort={handleSort} />\r\n\r\n//       <Pagination\r\n//         currentPage={currentPage}\r\n//         totalItems={sortedUsers.length}\r\n//         pageLimit={pageLimit}\r\n//         onPageChange={setCurrentPage}\r\n//         onLimitChange={setPageLimit}\r\n//       />\r\n//     </Container>\r\n//   );\r\n// };\r\n\r\n// export default UsersPage;\r\n\r\n//=======================\r\n\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { getUsers, deleteUser } from \"../services/api\";\r\n// import UserTable from \"../components/UserTable\";\r\n// import Pagination from \"../components/Pagination\";\r\n// import SearchBar from \"../components/SearchBar\";\r\n// import FilterPopup from \"../components/FilterPopup\";\r\n// import { useNavigate, useLocation } from \"react-router-dom\";\r\n\r\n// const UsersPage = () => {\r\n//   const [users, setUsers] = useState([]);\r\n//   const [searchQuery, setSearchQuery] = useState(\"\");\r\n//   const [filters, setFilters] = useState({});\r\n//   const [sortField, setSortField] = useState(\"\");\r\n//   const [sortOrder, setSortOrder] = useState(\"asc\");\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const [pageLimit, setPageLimit] = useState(10);\r\n//   const navigate = useNavigate();\r\n//   const location = useLocation(); // track route changes\r\n\r\n//   // Fetch users whenever location changes (e.g., after add/edit)\r\n//   useEffect(() => {\r\n//     fetchUsers();\r\n//   }, [location]);\r\n\r\n//   const fetchUsers = async () => {\r\n//     try {\r\n//       const data = await getUsers();\r\n//       const withDept = data.map((user, index) => ({\r\n//         ...user,\r\n//         department: [\"IT\", \"HR\", \"Finance\", \"Marketing\"][index % 4],\r\n//       }));\r\n//       setUsers(withDept);\r\n//     } catch (error) {\r\n//       alert(\"Failed to fetch users\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDelete = async (id) => {\r\n//     if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\r\n//     try {\r\n//       await deleteUser(id);\r\n//       setUsers(users.filter((u) => u.id !== id));\r\n//     } catch (error) {\r\n//       alert(\"Failed to delete user\");\r\n//     }\r\n//   };\r\n\r\n//   const handleSearch = (query) => {\r\n//     setSearchQuery(query);\r\n//     setCurrentPage(1);\r\n//   };\r\n\r\n//   const handleFilterChange = (newFilters) => {\r\n//     setFilters(newFilters);\r\n//     setCurrentPage(1);\r\n//   };\r\n\r\n//   const handleSort = (field) => {\r\n//     if (sortField === field) {\r\n//       setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\r\n//     } else {\r\n//       setSortField(field);\r\n//       setSortOrder(\"asc\");\r\n//     }\r\n//   };\r\n\r\n//   // Filtering\r\n//   const filteredUsers = users.filter((user) => {\r\n//     const [firstName, lastName] = user.name.split(\" \");\r\n//     const matchSearch =\r\n//       !searchQuery ||\r\n//       user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n//       user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n//       user.department.toLowerCase().includes(searchQuery.toLowerCase());\r\n\r\n//     const matchFirst =\r\n//       !filters.firstName ||\r\n//       firstName?.toLowerCase().includes(filters.firstName.toLowerCase());\r\n//     const matchLast =\r\n//       !filters.lastName ||\r\n//       lastName?.toLowerCase().includes(filters.lastName.toLowerCase());\r\n//     const matchEmail =\r\n//       !filters.email || user.email.toLowerCase().includes(filters.email.toLowerCase());\r\n//     const matchDept =\r\n//       !filters.department || user.department.toLowerCase() === filters.department.toLowerCase();\r\n\r\n//     return matchSearch && matchFirst && matchLast && matchEmail && matchDept;\r\n//   });\r\n\r\n//   // Sorting\r\n//   const sortedUsers = [...filteredUsers].sort((a, b) => {\r\n//     if (!sortField) return 0;\r\n//     let valA, valB;\r\n//     switch (sortField) {\r\n//       case \"firstName\":\r\n//         valA = a.name.split(\" \")[0];\r\n//         valB = b.name.split(\" \")[0];\r\n//         break;\r\n//       case \"lastName\":\r\n//         valA = a.name.split(\" \")[1] || \"\";\r\n//         valB = b.name.split(\" \")[1] || \"\";\r\n//         break;\r\n//       default:\r\n//         valA = a[sortField];\r\n//         valB = b[sortField];\r\n//     }\r\n//     if (typeof valA === \"string\") valA = valA.toLowerCase();\r\n//     if (typeof valB === \"string\") valB = valB.toLowerCase();\r\n\r\n//     if (valA < valB) return sortOrder === \"asc\" ? -1 : 1;\r\n//     if (valA > valB) return sortOrder === \"asc\" ? 1 : -1;\r\n//     return 0;\r\n//   });\r\n\r\n//   // Pagination\r\n//   const startIndex = (currentPage - 1) * pageLimit;\r\n//   const paginatedUsers = sortedUsers.slice(startIndex, startIndex + pageLimit);\r\n\r\n//   return (\r\n//     <div style={{ padding: \"20px\", maxWidth: \"1200px\", margin: \"auto\" }}>\r\n//       <h2 style={{ textAlign: \"center\" }}>User Management Dashboard</h2>\r\n\r\n//       <div\r\n//         style={{\r\n//           display: \"flex\",\r\n//           justifyContent: \"space-between\",\r\n//           margin: \"20px 0\",\r\n//           flexWrap: \"wrap\",\r\n//           gap: \"10px\",\r\n//         }}\r\n//       >\r\n//         <SearchBar onSearch={handleSearch} />\r\n//         <FilterPopup onFilterChange={handleFilterChange} />\r\n//         <button onClick={() => navigate(\"/add\")}>+ Add User</button>\r\n//       </div>\r\n\r\n//       <UserTable users={paginatedUsers} onDelete={handleDelete} onSort={handleSort} />\r\n\r\n//       <Pagination\r\n//         currentPage={currentPage}\r\n//         totalItems={sortedUsers.length}\r\n//         pageLimit={pageLimit}\r\n//         onPageChange={setCurrentPage}\r\n//         onLimitChange={setPageLimit}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default UsersPage;\r\n\r\n\r\n\r\n//ok-----------------------------------------------------------------------\r\n\r\n// import React, { useEffect, useState } from \"react\";\r\n// import { getUsers, deleteUser } from \"../services/api\";\r\n// import UserTable from \"../components/UserTable\";\r\n// import Pagination from \"../components/Pagination\";\r\n// import SearchBar from \"../components/SearchBar\";\r\n// import FilterPopup from \"../components/FilterPopup\";\r\n// import { useNavigate } from \"react-router-dom\";\r\n\r\n// const UsersPage = () => {\r\n//   const [users, setUsers] = useState([]);\r\n//   const [searchQuery, setSearchQuery] = useState(\"\");\r\n//   const [filters, setFilters] = useState({});\r\n//   const [sortField, setSortField] = useState(\"\");\r\n//   const [sortOrder, setSortOrder] = useState(\"asc\");\r\n//   const [currentPage, setCurrentPage] = useState(1);\r\n//   const [pageLimit, setPageLimit] = useState(10);\r\n//   const navigate = useNavigate();\r\n\r\n//   useEffect(() => {\r\n//     fetchUsers();\r\n//   }, []);\r\n\r\n//   const fetchUsers = async () => {\r\n//     try {\r\n//       const data = await getUsers();\r\n//       const withDept = data.map((user, index) => ({\r\n//         ...user,\r\n//         department: [\"IT\", \"HR\", \"Finance\", \"Marketing\"][index % 4],\r\n//       }));\r\n//       setUsers(withDept);\r\n//     } catch (error) {\r\n//       alert(\"Failed to fetch users\");\r\n//     }\r\n//   };\r\n\r\n//   const handleDelete = async (id) => {\r\n//     if (!window.confirm(\"Are you sure you want to delete this user?\")) return;\r\n//     try {\r\n//       await deleteUser(id);\r\n//       setUsers(users.filter((u) => u.id !== id));\r\n//     } catch (error) {\r\n//       alert(\"Failed to delete user\");\r\n//     }\r\n//   };\r\n\r\n//   const handleSearch = (query) => {\r\n//     setSearchQuery(query);\r\n//     setCurrentPage(1);\r\n//   };\r\n\r\n//   const handleFilterChange = (newFilters) => {\r\n//     setFilters(newFilters);\r\n//     setCurrentPage(1);\r\n//   };\r\n\r\n//   const handleSort = (field) => {\r\n//     if (sortField === field) {\r\n//       setSortOrder(sortOrder === \"asc\" ? \"desc\" : \"asc\");\r\n//     } else {\r\n//       setSortField(field);\r\n//       setSortOrder(\"asc\");\r\n//     }\r\n//   };\r\n\r\n//   const filteredUsers = users.filter((user) => {\r\n//     const [firstName, lastName] = user.name.split(\" \");\r\n//     const matchSearch =\r\n//       !searchQuery ||\r\n//       user.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n//       user.email.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n//       user.department.toLowerCase().includes(searchQuery.toLowerCase());\r\n\r\n//     const matchFirst =\r\n//       !filters.firstName ||\r\n//       firstName?.toLowerCase().includes(filters.firstName.toLowerCase());\r\n//     const matchLast =\r\n//       !filters.lastName ||\r\n//       lastName?.toLowerCase().includes(filters.lastName.toLowerCase());\r\n//     const matchEmail =\r\n//       !filters.email ||\r\n//       user.email.toLowerCase().includes(filters.email.toLowerCase());\r\n//     const matchDept =\r\n//       !filters.department ||\r\n//       user.department.toLowerCase() === filters.department.toLowerCase();\r\n\r\n//     return matchSearch && matchFirst && matchLast && matchEmail && matchDept;\r\n//   });\r\n\r\n//   const sortedUsers = [...filteredUsers].sort((a, b) => {\r\n//     if (!sortField) return 0;\r\n//     let valA, valB;\r\n//     switch (sortField) {\r\n//       case \"firstName\":\r\n//         valA = a.name.split(\" \")[0];\r\n//         valB = b.name.split(\" \")[0];\r\n//         break;\r\n//       case \"lastName\":\r\n//         valA = a.name.split(\" \")[1] || \"\";\r\n//         valB = b.name.split(\" \")[1] || \"\";\r\n//         break;\r\n//       default:\r\n//         valA = a[sortField];\r\n//         valB = b[sortField];\r\n//     }\r\n//     if (typeof valA === \"string\") valA = valA.toLowerCase();\r\n//     if (typeof valB === \"string\") valB = valB.toLowerCase();\r\n\r\n//     if (valA < valB) return sortOrder === \"asc\" ? -1 : 1;\r\n//     if (valA > valB) return sortOrder === \"asc\" ? 1 : -1;\r\n//     return 0;\r\n//   });\r\n\r\n//   const startIndex = (currentPage - 1) * pageLimit;\r\n//   const paginatedUsers = sortedUsers.slice(startIndex, startIndex + pageLimit);\r\n\r\n//   return (\r\n//     <div style={{ padding: \"20px\", maxWidth: \"1200px\", margin: \"auto\" }}>\r\n//       <h2 style={{ textAlign: \"center\" }}>User Management Dashboard</h2>\r\n\r\n//       <div style={{ display: \"flex\", justifyContent: \"space-between\", margin: \"20px 0\", flexWrap: \"wrap\", gap: \"10px\" }}>\r\n//         <SearchBar onSearch={handleSearch} />\r\n//         <FilterPopup onFilterChange={handleFilterChange} />\r\n//         <button onClick={() => navigate(\"/add\")}>+ Add User</button>\r\n//       </div>\r\n\r\n//       <UserTable users={paginatedUsers} onDelete={handleDelete} onSort={handleSort} />\r\n\r\n//       <Pagination\r\n//         currentPage={currentPage}\r\n//         totalItems={sortedUsers.length}\r\n//         pageLimit={pageLimit}\r\n//         onPageChange={setCurrentPage}\r\n//         onLimitChange={setPageLimit}\r\n//       />\r\n//     </div>\r\n//   );\r\n// };\r\n\r\n// export default UsersPage;\r\n\r\n\r\n//==================================================================\r\n//\r\n\r\n// import React, { useEffect, useState, useMemo } from \"react\";\r\n// import { getUsers, deleteUser } from \"../services/api\";\r\n// import UserTable from \"../components/UserTable\";\r\n// import SearchBar from \"../components/SearchBar\";\r\n// import Pagination from \"../components/Pagination\";\r\n// import FilterPopup from \"../components/FilterPopup\";\r\n\r\n// /**\r\n//  * Utility: map JSONPlaceholder user to our model\r\n//  */\r\n// function mapUser(u) {\r\n//   const nameParts = (u.name || \"\").split(\" \");\r\n//   const firstName = nameParts[0] || \"\";\r\n//   const lastName = nameParts.slice(1).join(\" \") || \"\";\r\n//   const department = (u.company && u.company.name) ? u.company.name : \"General\";\r\n//   return {\r\n//     id: u.id,\r\n//     firstName,\r\n//     lastName,\r\n//     email: u.email || \"\",\r\n//     department,\r\n//     // keep original raw for edits if needed\r\n//     raw: u,\r\n//   };\r\n// }\r\n\r\n// export default function UsersPage() {\r\n//   const [rawUsers, setRawUsers] = useState([]);\r\n//   const [loading, setLoading] = useState(false);\r\n//   const [error, setError] = useState(null);\r\n\r\n//   // UI states\r\n//   const [search, setSearch] = useState(\"\");\r\n//   const [filters, setFilters] = useState({ firstName: \"\", lastName: \"\", email: \"\", department: \"\" });\r\n//   const [filterPopupOpen, setFilterPopupOpen] = useState(false);\r\n//   const [pageSize, setPageSize] = useState(10);\r\n//   const [page, setPage] = useState(1);\r\n//   const [sortConfig, setSortConfig] = useState({ key: \"id\", direction: \"asc\" });\r\n\r\n//   useEffect(() => {\r\n//     fetchUsers();\r\n//   }, []);\r\n\r\n//   // Fetch users from API\r\n//   async function fetchUsers() {\r\n//     setLoading(true);\r\n//     setError(null);\r\n//     try {\r\n//       const data = await getUsers();\r\n//       // map to our simpler model\r\n//       setRawUsers(data.map(mapUser));\r\n//     } catch (err) {\r\n//       console.error(err);\r\n//       setError(err.message || \"Error fetching users\");\r\n//     } finally {\r\n//       setLoading(false);\r\n//     }\r\n//   }\r\n\r\n//   // Delete user handler\r\n//   async function handleDelete(id) {\r\n//     try {\r\n//       await deleteUser(id); // simulated\r\n//       // remove locally to reflect UI changes\r\n//       setRawUsers((prev) => prev.filter((u) => u.id !== id));\r\n//       alert(\"User deleted (simulated)\"); // simple notification\r\n//     } catch (err) {\r\n//       alert(\"Failed to delete user: \" + err.message);\r\n//     }\r\n//   }\r\n\r\n//   // Sort handler (toggle)\r\n//   function handleSort(key) {\r\n//     setSortConfig((prev) => {\r\n//       if (prev.key === key) {\r\n//         return { key, direction: prev.direction === \"asc\" ? \"desc\" : \"asc\" };\r\n//       } else {\r\n//         return { key, direction: \"asc\" };\r\n//       }\r\n//     });\r\n//   }\r\n\r\n//   // Apply filters + search + sort\r\n//   const processed = useMemo(() => {\r\n//     // start with rawUsers\r\n//     let items = [...rawUsers];\r\n\r\n//     // filter popup fields (exact/contains)\r\n//     if (filters.firstName) {\r\n//       items = items.filter((u) => u.firstName.toLowerCase().includes(filters.firstName.toLowerCase()));\r\n//     }\r\n//     if (filters.lastName) {\r\n//       items = items.filter((u) => u.lastName.toLowerCase().includes(filters.lastName.toLowerCase()));\r\n//     }\r\n//     if (filters.email) {\r\n//       items = items.filter((u) => u.email.toLowerCase().includes(filters.email.toLowerCase()));\r\n//     }\r\n//     if (filters.department) {\r\n//       items = items.filter((u) => u.department.toLowerCase().includes(filters.department.toLowerCase()));\r\n//     }\r\n\r\n//     // global search across fields\r\n//     if (search && search.trim() !== \"\") {\r\n//       const q = search.toLowerCase();\r\n//       items = items.filter((u) =>\r\n//         u.firstName.toLowerCase().includes(q) ||\r\n//         u.lastName.toLowerCase().includes(q) ||\r\n//         u.email.toLowerCase().includes(q) ||\r\n//         u.department.toLowerCase().includes(q)\r\n//       );\r\n//     }\r\n\r\n//     // sort\r\n//     const { key, direction } = sortConfig || {};\r\n//     if (key) {\r\n//       items.sort((a, b) => {\r\n//         const va = (a[key] || \"\").toString().toLowerCase();\r\n//         const vb = (b[key] || \"\").toString().toLowerCase();\r\n//         if (va < vb) return direction === \"asc\" ? -1 : 1;\r\n//         if (va > vb) return direction === \"asc\" ? 1 : -1;\r\n//         return 0;\r\n//       });\r\n//     }\r\n\r\n//     return items;\r\n//   }, [rawUsers, search, filters, sortConfig]);\r\n\r\n//   // pagination calculations\r\n//   const totalItems = processed.length;\r\n//   const totalPages = Math.max(1, Math.ceil(totalItems / pageSize));\r\n//   // adjust page if current page out of range\r\n//   useEffect(() => {\r\n//     if (page > totalPages) setPage(totalPages);\r\n//   }, [totalPages, page]);\r\n\r\n//   const currentData = processed.slice((page - 1) * pageSize, page * pageSize);\r\n\r\n//   return (\r\n//     <div>\r\n//       <div className=\"d-flex flex-column flex-md-row align-items-start gap-3 justify-content-between mb-3\">\r\n//         <div style={{ flex: 1, minWidth: 280 }}>\r\n//           <SearchBar value={search} onChange={(v) => { setSearch(v); setPage(1); }} />\r\n//         </div>\r\n\r\n//         <div className=\"d-flex gap-2 align-items-center\">\r\n//           <div>\r\n//             <select className=\"form-select\" value={pageSize} onChange={(e) => { setPageSize(Number(e.target.value)); setPage(1); }}>\r\n//               {[10, 25, 50, 100].map((n) => <option key={n} value={n}>{n} / page</option>)}\r\n//             </select>\r\n//           </div>\r\n\r\n//           <button className=\"btn btn-outline-secondary\" onClick={() => setFilterPopupOpen(true)}>Filter</button>\r\n//           <button className=\"btn btn-outline-success\" onClick={fetchUsers}>Refresh</button>\r\n//         </div>\r\n//       </div>\r\n\r\n//       {loading && <div className=\"alert alert-info\">Loading users...</div>}\r\n//       {error && <div className=\"alert alert-danger\">{error}</div>}\r\n\r\n//       <UserTable users={currentData} onDelete={handleDelete} onSort={handleSort} sortConfig={sortConfig} />\r\n\r\n//       <div className=\"d-flex justify-content-between align-items-center\">\r\n//         <div><small>Showing {(page - 1) * pageSize + 1} - {Math.min(totalItems, page * pageSize)} of {totalItems} users</small></div>\r\n//         <Pagination currentPage={page} totalPages={totalPages} onPageChange={(p) => setPage(p)} />\r\n//       </div>\r\n\r\n//       <FilterPopup visible={filterPopupOpen} onClose={() => setFilterPopupOpen(false)} onApply={(f) => { setFilters(f); setPage(1); }} initialFilters={filters} />\r\n//     </div>\r\n//   );\r\n// }\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}