{"ast":null,"code":"import _objectSpread from\"C:/Users/dmayu/OneDrive/Desktop/kanishka/project/extra/user_Dashboard/user_dashboard/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useEffect,useState}from\"react\";import{Card}from\"react-bootstrap\";import{useNavigate,useParams}from\"react-router-dom\";import UserForm from\"../components/UserForm\";import{getUsers,updateUser}from\"../services/api\";import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";export default function EditUserPage(){const{id}=useParams();// Extract user ID from URL parameters\nconst navigate=useNavigate();// Hook to navigate programmatically\nconst[initial,setInitial]=useState(null);// State to store initial user data for form\n// Fetch user data when component mounts\nuseEffect(()=>{const fetchOne=async()=>{try{var _found$company;const all=await getUsers();// Fetch all users\nconst found=all.find(u=>Number(u.id)===Number(id));// Find user with matching ID\nif(!found){alert(\"User not found\");// Show alert if user not found\nnavigate(\"/users\");// Redirect to users page\nreturn;}// Prepare initial form data with firstName, lastName, department\nsetInitial(_objectSpread(_objectSpread({},found),{},{department:((_found$company=found.company)===null||_found$company===void 0?void 0:_found$company.name)||\"\",firstName:found.name.split(\" \")[0],lastName:found.name.split(\" \").slice(1).join(\" \")}));}catch(_unused){alert(\"Error fetching user\");// Show alert if API call fails\nnavigate(\"/users\");// Redirect to users page\n}};fetchOne();},[id]);// Re-run effect if ID changes\n// Handle form submission for updating user\nconst handleSubmit=async payload=>{try{const updated=await updateUser(id,payload);// Call API to update user\n// Navigate back to users page and pass updated user in state for UI refresh\nnavigate(\"/users\",{state:{updatedUser:updated}});}catch(_unused2){alert(\"Failed to update user\");// Show error if update fails\n}};return/*#__PURE__*/_jsxs(Card,{className:\"p-3\",children:[/*#__PURE__*/_jsx(\"h4\",{children:\"Edit User\"}),initial?/*#__PURE__*/// Render form when initial data is ready\n_jsx(UserForm,{initialData:initial,onSubmit:handleSubmit,submitLabel:\"Update User\"}):/*#__PURE__*/// Show loading indicator while fetching data\n_jsx(\"div\",{children:\"Loading...\"})]});}","map":{"version":3,"names":["React","useEffect","useState","Card","useNavigate","useParams","UserForm","getUsers","updateUser","jsx","_jsx","jsxs","_jsxs","EditUserPage","id","navigate","initial","setInitial","fetchOne","_found$company","all","found","find","u","Number","alert","_objectSpread","department","company","name","firstName","split","lastName","slice","join","_unused","handleSubmit","payload","updated","state","updatedUser","_unused2","className","children","initialData","onSubmit","submitLabel"],"sources":["C:/Users/dmayu/OneDrive/Desktop/kanishka/project/extra/user_Dashboard/user_dashboard/src/pages/EditUserPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport UserForm from \"../components/UserForm\";\r\nimport { getUsers, updateUser } from \"../services/api\";\r\n\r\nexport default function EditUserPage() {\r\n  const { id } = useParams(); // Extract user ID from URL parameters\r\n  const navigate = useNavigate(); // Hook to navigate programmatically\r\n  const [initial, setInitial] = useState(null); // State to store initial user data for form\r\n\r\n  // Fetch user data when component mounts\r\n  useEffect(() => {\r\n    const fetchOne = async () => {\r\n      try {\r\n        const all = await getUsers(); // Fetch all users\r\n        const found = all.find((u) => Number(u.id) === Number(id)); // Find user with matching ID\r\n        if (!found) {\r\n          alert(\"User not found\"); // Show alert if user not found\r\n          navigate(\"/users\"); // Redirect to users page\r\n          return;\r\n        }\r\n        // Prepare initial form data with firstName, lastName, department\r\n        setInitial({\r\n          ...found,\r\n          department: found.company?.name || \"\",\r\n          firstName: found.name.split(\" \")[0],\r\n          lastName: found.name.split(\" \").slice(1).join(\" \"),\r\n        });\r\n      } catch {\r\n        alert(\"Error fetching user\"); // Show alert if API call fails\r\n        navigate(\"/users\"); // Redirect to users page\r\n      }\r\n    };\r\n    fetchOne();\r\n  }, [id]); // Re-run effect if ID changes\r\n\r\n  // Handle form submission for updating user\r\n  const handleSubmit = async (payload) => {\r\n    try {\r\n      const updated = await updateUser(id, payload); // Call API to update user\r\n      // Navigate back to users page and pass updated user in state for UI refresh\r\n      navigate(\"/users\", { state: { updatedUser: updated } });\r\n    } catch {\r\n      alert(\"Failed to update user\"); // Show error if update fails\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className=\"p-3\">\r\n      <h4>Edit User</h4>\r\n      {initial ? (\r\n        // Render form when initial data is ready\r\n        <UserForm \r\n          initialData={initial} \r\n          onSubmit={handleSubmit} \r\n          submitLabel=\"Update User\" \r\n        />\r\n      ) : (\r\n        // Show loading indicator while fetching data\r\n        <div>Loading...</div>\r\n      )}\r\n    </Card>\r\n  );\r\n}\r\n"],"mappings":"yKAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,OAASC,IAAI,KAAQ,iBAAiB,CACtC,OAASC,WAAW,CAAEC,SAAS,KAAQ,kBAAkB,CACzD,MAAO,CAAAC,QAAQ,KAAM,wBAAwB,CAC7C,OAASC,QAAQ,CAAEC,UAAU,KAAQ,iBAAiB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAEvD,cAAe,SAAS,CAAAC,YAAYA,CAAA,CAAG,CACrC,KAAM,CAAEC,EAAG,CAAC,CAAGT,SAAS,CAAC,CAAC,CAAE;AAC5B,KAAM,CAAAU,QAAQ,CAAGX,WAAW,CAAC,CAAC,CAAE;AAChC,KAAM,CAACY,OAAO,CAAEC,UAAU,CAAC,CAAGf,QAAQ,CAAC,IAAI,CAAC,CAAE;AAE9C;AACAD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAiB,QAAQ,CAAG,KAAAA,CAAA,GAAY,CAC3B,GAAI,KAAAC,cAAA,CACF,KAAM,CAAAC,GAAG,CAAG,KAAM,CAAAb,QAAQ,CAAC,CAAC,CAAE;AAC9B,KAAM,CAAAc,KAAK,CAAGD,GAAG,CAACE,IAAI,CAAEC,CAAC,EAAKC,MAAM,CAACD,CAAC,CAACT,EAAE,CAAC,GAAKU,MAAM,CAACV,EAAE,CAAC,CAAC,CAAE;AAC5D,GAAI,CAACO,KAAK,CAAE,CACVI,KAAK,CAAC,gBAAgB,CAAC,CAAE;AACzBV,QAAQ,CAAC,QAAQ,CAAC,CAAE;AACpB,OACF,CACA;AACAE,UAAU,CAAAS,aAAA,CAAAA,aAAA,IACLL,KAAK,MACRM,UAAU,CAAE,EAAAR,cAAA,CAAAE,KAAK,CAACO,OAAO,UAAAT,cAAA,iBAAbA,cAAA,CAAeU,IAAI,GAAI,EAAE,CACrCC,SAAS,CAAET,KAAK,CAACQ,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CACnCC,QAAQ,CAAEX,KAAK,CAACQ,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAACE,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG,CAAC,EACnD,CAAC,CACJ,CAAE,MAAAC,OAAA,CAAM,CACNV,KAAK,CAAC,qBAAqB,CAAC,CAAE;AAC9BV,QAAQ,CAAC,QAAQ,CAAC,CAAE;AACtB,CACF,CAAC,CACDG,QAAQ,CAAC,CAAC,CACZ,CAAC,CAAE,CAACJ,EAAE,CAAC,CAAC,CAAE;AAEV;AACA,KAAM,CAAAsB,YAAY,CAAG,KAAO,CAAAC,OAAO,EAAK,CACtC,GAAI,CACF,KAAM,CAAAC,OAAO,CAAG,KAAM,CAAA9B,UAAU,CAACM,EAAE,CAAEuB,OAAO,CAAC,CAAE;AAC/C;AACAtB,QAAQ,CAAC,QAAQ,CAAE,CAAEwB,KAAK,CAAE,CAAEC,WAAW,CAAEF,OAAQ,CAAE,CAAC,CAAC,CACzD,CAAE,MAAAG,QAAA,CAAM,CACNhB,KAAK,CAAC,uBAAuB,CAAC,CAAE;AAClC,CACF,CAAC,CAED,mBACEb,KAAA,CAACT,IAAI,EAACuC,SAAS,CAAC,KAAK,CAAAC,QAAA,eACnBjC,IAAA,OAAAiC,QAAA,CAAI,WAAS,CAAI,CAAC,CACjB3B,OAAO,cACN;AACAN,IAAA,CAACJ,QAAQ,EACPsC,WAAW,CAAE5B,OAAQ,CACrB6B,QAAQ,CAAET,YAAa,CACvBU,WAAW,CAAC,aAAa,CAC1B,CAAC,cAEF;AACApC,IAAA,QAAAiC,QAAA,CAAK,YAAU,CAAK,CACrB,EACG,CAAC,CAEX","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}