{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\dmayu\\\\OneDrive\\\\Desktop\\\\kanishka\\\\project\\\\extra\\\\user_Dashboard\\\\user_dashboard\\\\src\\\\pages\\\\EditUserPage.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from \"react\";\nimport { Card } from \"react-bootstrap\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport UserForm from \"../components/UserForm\";\nimport { getUsers, updateUser } from \"../services/api\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EditUserPage() {\n  _s();\n  const {\n    id\n  } = useParams(); // Extract user ID from URL parameters\n  const navigate = useNavigate(); // Hook to navigate programmatically\n  const [initial, setInitial] = useState(null); // State to store initial user data for form\n\n  // Fetch user data when component mounts\n  useEffect(() => {\n    const fetchOne = async () => {\n      try {\n        var _found$company;\n        const all = await getUsers(); // Fetch all users\n        const found = all.find(u => Number(u.id) === Number(id)); // Find user with matching ID\n        if (!found) {\n          alert(\"User not found\"); // Show alert if user not found\n          navigate(\"/users\"); // Redirect to users page\n          return;\n        }\n        // Prepare initial form data with firstName, lastName, department\n        setInitial({\n          ...found,\n          department: ((_found$company = found.company) === null || _found$company === void 0 ? void 0 : _found$company.name) || \"\",\n          firstName: found.name.split(\" \")[0],\n          lastName: found.name.split(\" \").slice(1).join(\" \")\n        });\n      } catch {\n        alert(\"Error fetching user\"); // Show alert if API call fails\n        navigate(\"/users\"); // Redirect to users page\n      }\n    };\n    fetchOne();\n  }, [id]); // Re-run effect if ID changes\n\n  // Handle form submission for updating user\n  const handleSubmit = async payload => {\n    try {\n      const updated = await updateUser(id, payload); // Call API to update user\n      // Navigate back to users page and pass updated user in state for UI refresh\n      navigate(\"/users\", {\n        state: {\n          updatedUser: updated\n        }\n      });\n    } catch {\n      alert(\"Failed to update user\"); // Show error if update fails\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Card, {\n    className: \"p-3\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Edit User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), initial ?\n    /*#__PURE__*/\n    // Render form when initial data is ready\n    _jsxDEV(UserForm, {\n      initialData: initial,\n      onSubmit: handleSubmit,\n      submitLabel: \"Update User\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this) :\n    /*#__PURE__*/\n    // Show loading indicator while fetching data\n    _jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 50,\n    columnNumber: 5\n  }, this);\n}\n_s(EditUserPage, \"nZu1uBYTThQmmq5y4ceIFLD1k9Q=\", false, function () {\n  return [useParams, useNavigate];\n});\n_c = EditUserPage;\nvar _c;\n$RefreshReg$(_c, \"EditUserPage\");","map":{"version":3,"names":["React","useEffect","useState","Card","useNavigate","useParams","UserForm","getUsers","updateUser","jsxDEV","_jsxDEV","EditUserPage","_s","id","navigate","initial","setInitial","fetchOne","_found$company","all","found","find","u","Number","alert","department","company","name","firstName","split","lastName","slice","join","handleSubmit","payload","updated","state","updatedUser","className","children","fileName","_jsxFileName","lineNumber","columnNumber","initialData","onSubmit","submitLabel","_c","$RefreshReg$"],"sources":["C:/Users/dmayu/OneDrive/Desktop/kanishka/project/extra/user_Dashboard/user_dashboard/src/pages/EditUserPage.jsx"],"sourcesContent":["import React, { useEffect, useState } from \"react\";\r\nimport { Card } from \"react-bootstrap\";\r\nimport { useNavigate, useParams } from \"react-router-dom\";\r\nimport UserForm from \"../components/UserForm\";\r\nimport { getUsers, updateUser } from \"../services/api\";\r\n\r\nexport default function EditUserPage() {\r\n  const { id } = useParams(); // Extract user ID from URL parameters\r\n  const navigate = useNavigate(); // Hook to navigate programmatically\r\n  const [initial, setInitial] = useState(null); // State to store initial user data for form\r\n\r\n  // Fetch user data when component mounts\r\n  useEffect(() => {\r\n    const fetchOne = async () => {\r\n      try {\r\n        const all = await getUsers(); // Fetch all users\r\n        const found = all.find((u) => Number(u.id) === Number(id)); // Find user with matching ID\r\n        if (!found) {\r\n          alert(\"User not found\"); // Show alert if user not found\r\n          navigate(\"/users\"); // Redirect to users page\r\n          return;\r\n        }\r\n        // Prepare initial form data with firstName, lastName, department\r\n        setInitial({\r\n          ...found,\r\n          department: found.company?.name || \"\",\r\n          firstName: found.name.split(\" \")[0],\r\n          lastName: found.name.split(\" \").slice(1).join(\" \"),\r\n        });\r\n      } catch {\r\n        alert(\"Error fetching user\"); // Show alert if API call fails\r\n        navigate(\"/users\"); // Redirect to users page\r\n      }\r\n    };\r\n    fetchOne();\r\n  }, [id]); // Re-run effect if ID changes\r\n\r\n  // Handle form submission for updating user\r\n  const handleSubmit = async (payload) => {\r\n    try {\r\n      const updated = await updateUser(id, payload); // Call API to update user\r\n      // Navigate back to users page and pass updated user in state for UI refresh\r\n      navigate(\"/users\", { state: { updatedUser: updated } });\r\n    } catch {\r\n      alert(\"Failed to update user\"); // Show error if update fails\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Card className=\"p-3\">\r\n      <h4>Edit User</h4>\r\n      {initial ? (\r\n        // Render form when initial data is ready\r\n        <UserForm \r\n          initialData={initial} \r\n          onSubmit={handleSubmit} \r\n          submitLabel=\"Update User\" \r\n        />\r\n      ) : (\r\n        // Show loading indicator while fetching data\r\n        <div>Loading...</div>\r\n      )}\r\n    </Card>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,IAAI,QAAQ,iBAAiB;AACtC,SAASC,WAAW,EAAEC,SAAS,QAAQ,kBAAkB;AACzD,OAAOC,QAAQ,MAAM,wBAAwB;AAC7C,SAASC,QAAQ,EAAEC,UAAU,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvD,eAAe,SAASC,YAAYA,CAAA,EAAG;EAAAC,EAAA;EACrC,MAAM;IAAEC;EAAG,CAAC,GAAGR,SAAS,CAAC,CAAC,CAAC,CAAC;EAC5B,MAAMS,QAAQ,GAAGV,WAAW,CAAC,CAAC,CAAC,CAAC;EAChC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGd,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;;EAE9C;EACAD,SAAS,CAAC,MAAM;IACd,MAAMgB,QAAQ,GAAG,MAAAA,CAAA,KAAY;MAC3B,IAAI;QAAA,IAAAC,cAAA;QACF,MAAMC,GAAG,GAAG,MAAMZ,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC9B,MAAMa,KAAK,GAAGD,GAAG,CAACE,IAAI,CAAEC,CAAC,IAAKC,MAAM,CAACD,CAAC,CAACT,EAAE,CAAC,KAAKU,MAAM,CAACV,EAAE,CAAC,CAAC,CAAC,CAAC;QAC5D,IAAI,CAACO,KAAK,EAAE;UACVI,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;UACzBV,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;UACpB;QACF;QACA;QACAE,UAAU,CAAC;UACT,GAAGI,KAAK;UACRK,UAAU,EAAE,EAAAP,cAAA,GAAAE,KAAK,CAACM,OAAO,cAAAR,cAAA,uBAAbA,cAAA,CAAeS,IAAI,KAAI,EAAE;UACrCC,SAAS,EAAER,KAAK,CAACO,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;UACnCC,QAAQ,EAAEV,KAAK,CAACO,IAAI,CAACE,KAAK,CAAC,GAAG,CAAC,CAACE,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,GAAG;QACnD,CAAC,CAAC;MACJ,CAAC,CAAC,MAAM;QACNR,KAAK,CAAC,qBAAqB,CAAC,CAAC,CAAC;QAC9BV,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;MACtB;IACF,CAAC;IACDG,QAAQ,CAAC,CAAC;EACZ,CAAC,EAAE,CAACJ,EAAE,CAAC,CAAC,CAAC,CAAC;;EAEV;EACA,MAAMoB,YAAY,GAAG,MAAOC,OAAO,IAAK;IACtC,IAAI;MACF,MAAMC,OAAO,GAAG,MAAM3B,UAAU,CAACK,EAAE,EAAEqB,OAAO,CAAC,CAAC,CAAC;MAC/C;MACApB,QAAQ,CAAC,QAAQ,EAAE;QAAEsB,KAAK,EAAE;UAAEC,WAAW,EAAEF;QAAQ;MAAE,CAAC,CAAC;IACzD,CAAC,CAAC,MAAM;MACNX,KAAK,CAAC,uBAAuB,CAAC,CAAC,CAAC;IAClC;EACF,CAAC;EAED,oBACEd,OAAA,CAACP,IAAI;IAACmC,SAAS,EAAC,KAAK;IAAAC,QAAA,gBACnB7B,OAAA;MAAA6B,QAAA,EAAI;IAAS;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EACjB5B,OAAO;IAAA;IACN;IACAL,OAAA,CAACJ,QAAQ;MACPsC,WAAW,EAAE7B,OAAQ;MACrB8B,QAAQ,EAAEZ,YAAa;MACvBa,WAAW,EAAC;IAAa;MAAAN,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1B,CAAC;IAAA;IAEF;IACAjC,OAAA;MAAA6B,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CACrB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACG,CAAC;AAEX;AAAC/B,EAAA,CA1DuBD,YAAY;EAAA,QACnBN,SAAS,EACPD,WAAW;AAAA;AAAA2C,EAAA,GAFNpC,YAAY;AAAA,IAAAoC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}